{
	"info": {
		"_postman_id": "3c4fbbee-32ed-48ca-b690-bda39a291790",
		"name": "CPT API",
		"description": "CPT API Phase I\n\nContact Support:\n Email: datalabs@ama-assn.org",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Initialize",
			"item": [
				{
					"name": "Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28d2b7a6-4d99-4535-80b1-6f824fe0f8cf",
								"exec": [
									"pm.globals.set('responses', new Map())\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    pm.globals.set('token', jsonData.accessToken);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Save access token\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"    pm.globals.set('token', jsonData.accessToken);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientId\": \"{{CONSUMER_ID}}\",\r\n    \"clientSecret\": \"{{CONSUMER_SECRET}}\",\r\n    \"grantType\": \"client_credentials\"\r\n}\r\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "https://{{PASSPORT_HOST}}/auth/provider/token",
							"protocol": "https",
							"host": [
								"{{PASSPORT_HOST}}"
							],
							"path": [
								"auth",
								"provider",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CPT entitlements",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93141c25-ae3b-47bb-aca1-21f00653c6cf",
								"exec": [
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"returnCode\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"returnMessage\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"customerNumber\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"customerName\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"responseId\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"subscriptionsList\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(6)\r",
									"});\r",
									"\r",
									"pm.test(\"Subscriptions list is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Object.keys(jsonData.subscriptionsList).length).to.equal(1)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{PASSPORT_HOST}}/auth/entitlements/list/CPTAPI",
							"protocol": "https",
							"host": [
								"{{PASSPORT_HOST}}"
							],
							"path": [
								"auth",
								"entitlements",
								"list",
								"CPTAPI"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Descriptors",
			"item": [
				{
					"name": "All CPT descriptors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ad459e2-2aa3-4b38-b7a7-3deb6e5ae3b3",
								"exec": [
									"console.log(\"Token: \" + pm.globals.get('token'))\r",
									"console.log(\"Authorization Header: \" + pm.request.headers.get('Authorization'))\r",
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"console.log(\"Request URL Path: \" + pm.request.url.getPath())\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(10677)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"medium_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"long_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/descriptors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"descriptors"
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "All CPT descriptors with keyword filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "516eb61c-9b4a-45c2-b173-7130673f063f",
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"var request_path = pm.request.url.getPath().split('/')\r",
									"var request_name = request_path[request_path.length-1]\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(446)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"medium_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"long_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Descriptors have keywords\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        var descriptors = (record.short_descriptor + record.medium_descriptor + record.long_descriptor).toLowerCase();\r",
									"\r",
									"        pm.expect(\r",
									"            descriptors.includes('heart') ||\r",
									"            descriptors.includes('blood')\r",
									"        ).to.eql(true)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/descriptors?keyword=heart&keyword=blood",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"descriptors"
							],
							"query": [
								{
									"key": "keyword",
									"value": "heart",
									"description": "Filter by keyword across descriptors."
								},
								{
									"key": "keyword",
									"value": "blood"
								},
								{
									"key": "since",
									"value": "2020-04-01",
									"disabled": true
								}
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "All CPT descriptors with length filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13fac245-9c7b-4bb5-9262-49ea6f383077",
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(10677)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"medium_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(3)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/descriptors?length=short&length=medium",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"descriptors"
							],
							"query": [
								{
									"key": "length",
									"value": "short",
									"description": "Filter by description length. Any of \"short\", \"medium\", or \"long\"."
								},
								{
									"key": "length",
									"value": "medium"
								},
								{
									"key": "length",
									"value": "long",
									"disabled": true
								}
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "All CPT descriptors with wildcard search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9aadad95-805f-46d4-9566-7360a5cfdda6",
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1776)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"medium_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"long_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(\r",
									"            (record.code.startsWith('0') && record.code.endsWith('U')) ||\r",
									"            record.code.endsWith('T') ||\r",
									"            record.code.startsWith('9')\r",
									"        ).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/descriptors?code=0*U&code=*T&code=9*",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"descriptors"
							],
							"query": [
								{
									"key": "code",
									"value": "0*U"
								},
								{
									"key": "code",
									"value": "*T"
								},
								{
									"key": "code",
									"value": "9*"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All CPT descriptors with since filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "453a431f-5188-4c64-a903-f0facd3b7efc",
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1776)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"medium_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"long_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(\r",
									"            (record.code.startsWith('0') && record.code.endsWith('U')) ||\r",
									"            record.code.endsWith('T') ||\r",
									"            record.code.startsWith('9')\r",
									"        ).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/descriptors?since=20200401",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"descriptors"
							],
							"query": [
								{
									"key": "since",
									"value": "20200401"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All CPT descriptors with all filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5b33f66b-4b79-4712-bc9f-28aa1f7189aa",
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(446)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"long_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(3)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Descriptors have keywords\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        var descriptors = (record.short_descriptor + record.medium_descriptor + record.long_descriptor).toLowerCase();\r",
									"\r",
									"        pm.expect(\r",
									"            descriptors.includes('heart') ||\r",
									"            descriptors.includes('blood')\r",
									"        ).to.eql(true)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/descriptors?keyword=heart&keyword=blood&length=short&length=long",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"descriptors"
							],
							"query": [
								{
									"key": "keyword",
									"value": "heart",
									"description": "Filter by keyword across descriptors."
								},
								{
									"key": "keyword",
									"value": "blood"
								},
								{
									"key": "length",
									"value": "short",
									"description": "Filter by description length. Any of \"short\", \"medium\", or \"long\"."
								},
								{
									"key": "length",
									"value": "long"
								}
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "CPT descriptor by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "241da2f2-35af-4037-9591-8031d7402e05",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is a single dict\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"code\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"short_descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"medium_descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"long_descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(4)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/descriptor/:code",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"descriptor",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"type": "string",
									"value": "87426"
								}
							]
						},
						"description": "Returns all lengths of the descriptor for a particular CPT Code."
					},
					"response": []
				},
				{
					"name": "CPT descriptor by code with length filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad3b4c30-0399-47d9-83a8-a3ff697bd034",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is a single dict\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"code\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"medium_descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"long_descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(3)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/descriptor/:code?length=medium&length=long",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"descriptor",
								":code"
							],
							"query": [
								{
									"key": "length",
									"value": "medium"
								},
								{
									"key": "length",
									"value": "long"
								}
							],
							"variable": [
								{
									"key": "code",
									"type": "string",
									"value": "87426"
								}
							]
						},
						"description": "Returns all lengths of the descriptor for a particular CPT Code."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Clinician Descriptors",
			"item": [
				{
					"name": "All ClinicianDescriptors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c03f7098-e015-43fe-86a3-7d583379bcf1",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(133)  // previously 126\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(3)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clinician/descriptors?keyword=heart&keyword=water",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clinician",
								"descriptors"
							],
							"query": [
								{
									"key": "keyword",
									"value": "heart",
									"description": "Filter by keyword across descriptors."
								},
								{
									"key": "keyword",
									"value": "water"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All ClinicianDescriptors with keyword filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac2685bc-3607-4469-aad7-c5e224e67d70",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(133)  // previously 126\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(3)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Descriptors have keywords\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        var descriptor = record.descriptor.toLowerCase()\r",
									"        pm.expect(\r",
									"            descriptor.includes('heart') ||\r",
									"            descriptor.includes('water')\r",
									"        ).to.eql(true)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clinician/descriptors?keyword=heart&keyword=water",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clinician",
								"descriptors"
							],
							"query": [
								{
									"key": "keyword",
									"value": "heart",
									"description": "Filter by keyword across descriptors."
								},
								{
									"key": "keyword",
									"value": "water"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All ClinicianDescriptors with wildcard search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aa86485f-060e-4d8b-b90a-83ba302e36b2",
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(18)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(3)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(\r",
									"            record.code.startsWith('0') && record.code.endsWith('5')\r",
									"        ).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clinician/descriptors?code=0*5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clinician",
								"descriptors"
							],
							"query": [
								{
									"key": "code",
									"value": "0*5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All ClinicianDescriptors with since filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "89e0f06d-a933-414d-9610-aecf02b77619",
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(18)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(3)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var code = jsonData[0].code\r",
									"    pm.expect(code.startsWith('0')).to.eql(true)\r",
									"    pm.expect(code.endsWith('5')).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData[0]).length).to.eql(3)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(\r",
									"            record.code.startsWith('0') && record.code.endsWith('5')\r",
									"        ).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clinician/descriptors?since=20200401",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clinician",
								"descriptors"
							],
							"query": [
								{
									"key": "since",
									"value": "20200401"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clinician descriptors by CPT code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0e106a1-cfb5-4753-a44f-5d0ca0feb46c",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(3)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Clinician Descriptor ID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.id).to.eql('10045627')\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/clinician/descriptors/:code",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"clinician",
								"descriptors",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "11970"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Consumer Descriptors",
			"item": [
				{
					"name": "All Consumer descriptors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9decfc42-e159-40fc-902d-8863dbc0f42a",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(537)  // previously 519\r",
									"    // console.log(jsonData.length)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(2)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/consumer/descriptors?keyword=heart&keyword=water",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"consumer",
								"descriptors"
							],
							"query": [
								{
									"key": "keyword",
									"value": "heart",
									"description": "Filter by keyword across descriptors."
								},
								{
									"key": "keyword",
									"value": "water"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All Consumer descriptors with keyword filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5d00720-f305-4447-97c2-e33c8cddaa6e",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(537)  // previously 519\r",
									"    // console.log(jsonData.length)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(2)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Descriptors have keywords\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        var descriptor = record.descriptor.toLowerCase()\r",
									"        pm.expect(\r",
									"            descriptor.includes('heart') ||\r",
									"            descriptor.includes('water')\r",
									"        ).to.eql(true)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/consumer/descriptors?keyword=heart&keyword=water",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"consumer",
								"descriptors"
							],
							"query": [
								{
									"key": "keyword",
									"value": "heart",
									"description": "Filter by keyword across descriptors."
								},
								{
									"key": "keyword",
									"value": "water"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All ConsumerDescriptors with wildcard search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b9a243d-e16d-49e5-bb96-846295700fee",
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(2)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(\r",
									"            record.code.startsWith('0') && record.code.endsWith('5')\r",
									"        ).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/consumer/descriptors?code=0*5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"consumer",
								"descriptors"
							],
							"query": [
								{
									"key": "code",
									"value": "0*5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer descriptor by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f296c92e-6d7c-4089-96bc-d18973479513",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is a single dict\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
									"});\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"code\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(2)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/consumer/descriptor/:code",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"consumer",
								"descriptor",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"type": "string",
									"value": "00100"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Modifiers",
			"item": [
				{
					"name": "All Modifiers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "44e60e73-f32e-4199-8d5b-13f9dfd3ff9b",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(87)  // was 39\r",
									"    // console.log(jsonData.length)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"type\" in record).to.eql(true)\r",
									"        pm.expect(\"general_use\" in record).to.eql(true)\r",
									"        pm.expect(\"ambulatory_service_center\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(5)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/modifiers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"modifiers"
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "All Modifiers with type filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f393eb5f-2cb9-4cf9-be54-2d5cd0917041",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(45)\r",
									"    // console.log(jsonData.length)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"type\" in record).to.eql(true)\r",
									"        pm.expect(\"general_use\" in record).to.eql(true)\r",
									"        pm.expect(\"ambulatory_service_center\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(5)\r",
									"    })\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Types are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\r",
									"            record.type == 'Level II' ||\r",
									"            record.type == 'Anesthesia Physical Status'\r",
									"        ).to.eql(true)\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/modifiers?type=Level II&type=Anesthesia Physical Status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"modifiers"
							],
							"query": [
								{
									"key": "type",
									"value": "Level II"
								},
								{
									"key": "type",
									"value": "Anesthesia Physical Status"
								}
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "Modifier by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5156139-7076-4ab5-a066-9f0b1c830300",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is a single dict\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"code\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"type\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"general_use\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"ambulatory_service_center\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(5)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/modifier/:code",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"modifier",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "P5"
								}
							]
						},
						"description": "Returns all lengths of the descriptor for a particular CPT Code."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PLA",
			"item": [
				{
					"name": "All PLA details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67053a8b-3ba4-4372-8d56-2fbc2268abc9",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(14)  // previously 6\r",
									"    // console.log(jsonData.length)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"test\" in record).to.eql(true)\r",
									"        pm.expect(\"lab\" in record).to.eql(true)\r",
									"        pm.expect(\"manufacturer\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pla/details?keyword=analysis",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pla",
								"details"
							],
							"query": [
								{
									"key": "keyword",
									"value": "analysis"
								}
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "All PLA details with wildcard search",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fbbdb47b-4443-46b2-9abf-e1ab4af53cdf",
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"test\" in record).to.eql(true)\r",
									"        pm.expect(\"lab\" in record).to.eql(true)\r",
									"        pm.expect(\"manufacturer\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    })\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(\r",
									"            record.code.startsWith('02') && record.code.endsWith('U')\r",
									"        ).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pla/details?code=02*U",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pla",
								"details"
							],
							"query": [
								{
									"key": "code",
									"value": "02*U"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PLA details by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f365e8d-4746-4d39-b188-bef93f6bd89e",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is a single dict\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"code\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"test\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"lab\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"manufacturer\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(4)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pla/details/:code",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pla",
								"details",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"type": "string",
									"value": "0001U"
								}
							]
						},
						"description": "Returns all lengths of the descriptor for a particular CPT Code."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Releases",
			"item": [
				{
					"name": "All Releases",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e29ea8cd-6c42-4773-983a-67f956840bff",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.above(1)\r",
									"    // console.log(jsonData.length)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"publish_date\" in record).to.eql(true)\r",
									"        pm.expect(\"effective_date\" in record).to.eql(true)\r",
									"        pm.expect(\"type\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/releases",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"releases"
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "Most recent release",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c839c27-5377-4310-99d1-bd744c35dfc7",
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1)\r",
									"    // console.log(jsonData.length)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"id\" in jsonData[0]).to.eql(true)\r",
									"    pm.expect(\"publish_date\" in jsonData[0]).to.eql(true)\r",
									"    pm.expect(\"effective_date\" in jsonData[0]).to.eql(true)\r",
									"    pm.expect(\"type\" in jsonData[0]).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData[0]).length).to.eql(4)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "fd0d5475-c110-4aae-a35e-bd58f3756501",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/releases?results=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"releases"
							],
							"query": [
								{
									"key": "results",
									"value": "1"
								}
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "PDF",
			"item": [
				{
					"name": "Latest PDFs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e26b489e-1474-4726-93dc-5b6573befafb",
								"exec": [
									"// if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"//     var responses = pm.globals.get('responses')\r",
									"//     responses[pm.info.requestName] = pm.response.json()\r",
									"//     pm.globals.set('responses', responses)\r",
									"// }\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/pdfs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pdfs"
							]
						},
						"description": "Returns all lengths of the descriptor for a particular CPT Code."
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Default",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "443c0d7c-3e7a-443a-9b00-992df7951c59",
						"exec": [
							"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
							"    var responses = pm.globals.get('responses')\r",
							"    responses[pm.info.requestName] = pm.response.json()\r",
							"    pm.globals.set('responses', responses)\r",
							"}\r",
							"\r",
							"pm.test(\"Response code indicates success\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/some/random/endpoint/path",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"some",
						"random",
						"endpoint",
						"path"
					]
				},
				"description": "Returns all lengths of the descriptor for a particular CPT Code."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2b9ac555-9ca2-4bcd-b7e4-a4b9fec4c441",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "29cef7ca-b9e2-4b2a-a0e8-3fcd7c367d09",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "6986c663-93c7-45dc-b49c-10edf5c5db18",
			"key": "baseUrl",
			"value": "https://ew1ea3aqg5.execute-api.us-east-1.amazonaws.com/test"
		},
		{
			"id": "aa327e23-bf2a-43f5-b587-56cb62bea61c",
			"key": "MARK_LOGIC_HOST",
			"value": "appd1454"
		},
		{
			"id": "e6a67843-78c6-4c43-8799-d5af92783c6f",
			"key": "MARK_LOGIC_PORT",
			"value": "8000"
		},
		{
			"id": "46a12de0-ac79-4c64-b7c9-24453a300e59",
			"key": "MARK_LOGIC_USERNAME",
			"value": "plane"
		},
		{
			"id": "ea0eb8ec-a2b2-43c6-92e8-c249021d9d49",
			"key": "MARK_LOGIC_PASSWORD",
			"value": "pL@n3_dev"
		},
		{
			"id": "049c8f9e-f6fb-4d6b-93d6-05e6c4147bca",
			"key": "PASSPORT_HOST",
			"value": "amapassport-test.ama-assn.org"
		},
		{
			"id": "4145d4a1-911d-4e3f-b1fd-44266ec48cfa",
			"key": "CONSUMER_ID",
			"value": "9a3b3d92-5ef9-4ca7-b8ba-ca77344d6753"
		},
		{
			"id": "443d44de-6d79-409a-91e6-0406caa97a9c",
			"key": "CONSUMER_SECRET",
			"value": "d6ee130c-9beb-41a6-b84c-3b8224620fa6"
		},
		{
			"id": "f1b9ed17-fbc3-4d28-9e38-0bc297e0afb7",
			"key": "SAVE_DATA",
			"value": "false"
		}
	],
	"protocolProfileBehavior": {}
}