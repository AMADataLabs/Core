#!/bin/bash


SCRIPT=`realpath $0`
SCRIPT_PATH=`dirname $SCRIPT`
PROJECT_NAME=
DEPENDENCY_LIST=
FORCE_OVERWRITE=false


main() {
    process_arguments $*

    create_project_directories

    generate_configuration_files

    # create_virtual_environment
}


process_arguments() {
    while (( "$#" )); do
      case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -l|--list-deps)
            print_master_dependencies
            exit 0
            shift
            ;;
        -d|--dependencies)
            DEPENDENCY_LIST=$2
            shift
            shift
            ;;
        -f|--force)
            FORCE_OVERWRITE=true
            shift
            ;;
        *)
            PROJECT_NAME=$1
            shift
            ;;
      esac
    done

    if [[ "$PROJECT_NAME" == "" ]]; then
        echo "Error: The name of the project to create was not specified."
        exit 1
    fi
}


create_project_directories() {
    # create_directory Build ${PROJECT_NAME}

    create_directory Environment ${PROJECT_NAME}
}


generate_configuration_files() {
    generate_dependency_whitelist

    generate_requirements

    # generate_dockerfile
}


print_usage() {
    echo "Usage: create-project <project name> [-h|--help] [-l|--list-deps] [-d|--dependencies dep1[,dep2[...]]]"
}


print_master_dependencies() {
    cat ${SCRIPT_PATH}/../Environment/Master/requirements.txt | sed 's/==.*//'
}


create_directory() {
    DIRECTORY_NAME=$1
    PROJECT_NAME=$2
    DIRECTORY_PATH=${SCRIPT_PATH}/../${DIRECTORY_NAME}/${PROJECT_NAME}

    if [[ "$FORCE_OVERWRITE" == false && -d $DIRECTORY_PATH ]]; then
        real_directory_path=`realpath ${DIRECTORY_PATH}`
        echo "Error: Project directory ${real_directory_path} already exists."
        exit 2
    fi

    echo "Creating directory ${DIRECTORY_PATH}"
    mkdir -p ${DIRECTORY_PATH}
}


generate_dependency_whitelist() {
    PROJECT_ENV_PATH=${SCRIPT_BASE_PATH}/../Environment/${PROJECT_NAME}
    WHITELIST_PATH=${PROJECT_ENV_PATH}/whitelist.txt

    if [[ "$DEPENDENCY_LIST" != "" ]]; then
        echo $DEPENDENCY_LIST > ${WHITELIST_PATH}
        echo Created dependency whitelist file `realpath ${WHITELIST_PATH}`
    fi
}


generate_requirements() {
    GENENV="python ${SCRIPT_PATH}/run.py python ${SCRIPT_PATH}/genenv.py"
    MASTER_ENV_PATH=${SCRIPT_PATH}/../Environment/Master
    PROJECT_ENV_PATH=${SCRIPT_PATH}/../Environment/${PROJECT_NAME}

    ARGUMENTS="--env pip --in ${MASTER_ENV_PATH}/requirements.txt --out ${PROJECT_ENV_PATH}/requirements.txt \
        --template ${MASTER_ENV_PATH}/requirements_template.txt "

    if [[ "$DEPENDENCY_LIST" != "" ]]; then
        ARGUMENTS="${ARGUMENTS} --whitelist ${PROJECT_ENV_PATH}/whitelist.txt"
    fi

    echo "Generating requirements.txt for project ${PROJECT_NAME}"
    $GENENV $ARGUMENTS
}


generate_dockerfile() {
    echo "Not Implemented"
}


main $*
