#!/bin/bash


SCRIPT_PATH=`realpath $0`
SCRIPT_BASE_PATH=`dirname $SCRIPT_PATH`
ACTIVATE=". ${SCRIPT_BASE_PATH}/../Environment/Master/bin/activate"
GENENV="python ${SCRIPT_BASE_PATH}/run.py python ${SCRIPT_BASE_PATH}/genenv.py"
RENDER_TEMPLATE="python ${SCRIPT_BASE_PATH}/run.py python ${SCRIPT_BASE_PATH}/render_template.py"
MASTER_BUILD_PATH=${SCRIPT_BASE_PATH}/../Build/Master
PROJECT_NAME=
DEPENDENCY_LIST=
FORCE_OVERWRITE=false
SANDBOX=false


main() {
    process_arguments "$@"

    create_project_directories

    generate_configuration_files

    render_terraform_templates
}


process_arguments() {
    while (( "$#" )); do
      case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -l|--list-deps)
            print_master_dependencies
            exit 0
            shift
            ;;
        -d|--dependencies)
            DEPENDENCY_LIST=$2
            shift
            shift
            ;;
        -f|--force)
            FORCE_OVERWRITE=true
            shift
            ;;
        -s|--sandbox)
            SANDBOX=true
            shift
            ;;
        *)
            PROJECT_NAME=$1
            shift
            ;;
      esac
    done

    if [[ "$PROJECT_NAME" == "" ]]; then
        echo "Error: The name of the project to create was not specified."
        exit 1
    fi
}


create_project_directories() {
    if [[ "$SANDBOX" == true ]]; then
        echo "--- Creating sandbox project ${PROJECT_NAME} ---"

        create_directory Sandbox ${PROJECT_NAME}
    else
        echo "--- Creating global project ${PROJECT_NAME} ---"

        create_directory Build ${PROJECT_NAME}
        create_directory Deploy ${PROJECT_NAME}
        create_directory Source/Terraform/Sandbox ${PROJECT_NAME}
        create_directory Source/Terraform/Module ${PROJECT_NAME}
    fi
}


generate_configuration_files() {
    if [[ "$SANDBOX" == true ]]; then
        echo "--- Generating build files for project ${PROJECT_NAME} ---"
        generate_build_files Sandbox
    else
        echo "--- Generating configuration files for project ${PROJECT_NAME} ---"
        generate_build_files Build

        generate_dependency_whitelist

        generate_requirements

        generate_modspec

        render_master_template Build Dockerfile_template Dockerfile
    fi
}


render_terraform_templates() {
    render_terraform_template Sandbox main.tf
    render_terraform_template Sandbox state.tf
    render_terraform_template Module input.tf
}


print_usage() {
    echo "Usage: create-project [OPTION]... <project name>"
    echo "Create directories and initial configuration files for a project."
    echo
    echo "OPTIONS"
    echo "  -f, --force                           overwrite any directories or files that are created"
    echo "  -h, --help                            print this usage text"
    echo "  -s, --sandbox                         create Sandbox project instead of a global (repository) project"
    echo "  -l, --list-deps                       list the available Python dependencies and then quit"
    echo "  -d, --dependencies dep1[,dep2[...]]]  specify dependencies for the project"
}


print_master_dependencies() {
    cat ${SCRIPT_BASE_PATH}/../Build/Master/requirements.txt | sed 's/==.*//'
}


create_directory() {
    DIRECTORY_NAME=$1
    PROJECT_NAME=$2
    DIRECTORY_PATH=${SCRIPT_BASE_PATH}/../${DIRECTORY_NAME}/${PROJECT_NAME}

    echo "Creating directory ${DIRECTORY_PATH}"

    if [[ "$FORCE_OVERWRITE" == false && -d $DIRECTORY_PATH ]]; then
        real_directory_path=`realpath ${DIRECTORY_PATH}`
        echo "Warning: Project directory ${real_directory_path} already exists."
    fi

    mkdir -p ${DIRECTORY_PATH}
}


generate_build_files() {
    DIRECTORY_NAME=$1

    copy_master_file Build ${DIRECTORY_NAME} settings.py

    render_master_template ${DIRECTORY_NAME} dotenv_template.txt dotenv_template.txt
}


generate_dependency_whitelist() {
    PROJECT_ENV_PATH=${SCRIPT_BASE_PATH}/../Build/${PROJECT_NAME}
    WHITELIST_PATH=${PROJECT_ENV_PATH}/whitelist.txt

    if [[ "$DEPENDENCY_LIST" != "" ]]; then
        echo $DEPENDENCY_LIST > ${WHITELIST_PATH}
        echo "-> Created dependency whitelist file `realpath ${WHITELIST_PATH}`"
    fi
}


generate_requirements() {
    PROJECT_BUILD_PATH=${SCRIPT_BASE_PATH}/../Build/${PROJECT_NAME}

    ARGUMENTS="--env pip --in ${MASTER_BUILD_PATH}/requirements.txt --out ${PROJECT_BUILD_PATH}/requirements.txt \
        --template ${MASTER_BUILD_PATH}/requirements_template.txt "

    if [[ "$DEPENDENCY_LIST" != "" ]]; then
        ARGUMENTS="${ARGUMENTS} --whitelist ${PROJECT_BUILD_PATH}/whitelist.txt"
    fi

    echo "-> Generating requirements.txt for project ${PROJECT_NAME}"
    $ACTIVATE
    $GENENV $ARGUMENTS
    deactivate
}


generate_modspec() {
    copy_master_file Build Build modspec.yaml
}


render_master_template() {
    DIRECTORY_NAME=$1
    TEMPLATE_NAME=$2
    RENDERING_NAME=$3
    TEMPLATE_PATH=${SCRIPT_BASE_PATH}/../Build/Master/${TEMPLATE_NAME}
    RENDERING_PATH=${SCRIPT_BASE_PATH}/../Build/${PROJECT_NAME}/${RENDERING_NAME}

    if [[ "$FORCE_OVERWRITE" == false && -d $RENDERING_PATH ]]; then
        real_path=`realpath ${RENDERING_PATH}`
        echo "Error: Template rendering ${real_path} already exists."
        exit 2
    fi

    echo "-> Rendering Build/Master template ${TEMPLATE_NAME} to Build/${PROJECT_NAME}/${RENDERING_NAME}"

    $ACTIVATE
    $RENDER_TEMPLATE -t ${TEMPLATE_PATH} -f ${RENDERING_PATH} -v project=${PROJECT_NAME},slug=$(slug ${PROJECT_NAME})
    deactivate
}


copy_master_file() {
    SOURCE=$1
    DESTINATION=$2
    FILE_NAME=$3
    SOURCE_PATH=${SCRIPT_BASE_PATH}/../${SOURCE}/Master/${FILE_NAME}
    DESTINATION_PATH=${SCRIPT_BASE_PATH}/../${DESTINATION}/${PROJECT_NAME}/${FILE_NAME}

    echo "-> Copying file ${FILE_NAME} from ${SOURCE}/Master to ${DESTINATION}/${PROJECT_NAME}"

    if [[ "$FORCE_OVERWRITE" == false && -d $DESTINATION_PATH ]]; then
        real_path=`realpath ${DESTINATION_PATH}`
        echo "Error: File ${real_path} already exists."
        exit 2
    fi

    cp -f ${SOURCE_PATH} ${DESTINATION_PATH}
}


render_terraform_template() {
    TEMPLATE_DIRECTORY=$1
    TERRAFORM_FILE=$2
    TEMPLATE_NAME=${TERRAFORM_FILE/.tf/.jinja}
    TEMPLATE_PATH=${SCRIPT_BASE_PATH}/../Source/Terraform/Template/${TEMPLATE_DIRECTORY}/${TEMPLATE_NAME}
    RENDERING_PATH=${SCRIPT_BASE_PATH}/../Source/Terraform/${TEMPLATE_DIRECTORY}/${PROJECT_NAME}/${TERRAFORM_FILE}


    if [[ "$FORCE_OVERWRITE" == false && -d $RENDERING_PATH ]]; then
        real_path=`realpath ${RENDERING_PATH}`
        echo "Error: Template rendering ${real_path} already exists."
        exit 2
    fi

    echo "-> Rendering Terraform template ${TEMPLATE_NAME} to Source/Terraform/${PROJECT_NAME}/${TERRAFORM_FILE}"

    $ACTIVATE
    $RENDER_TEMPLATE -t ${TEMPLATE_PATH} -f ${RENDERING_PATH} -v project=${PROJECT_NAME}
    deactivate
}


slug() {
    NAME=$1

    echo "${NAME}" | sed -e 's/\([A-Z][a-z][a-z]*\)/-\1/g' -e 's/\([A-Z][A-Z][A-Z]*\)/-\1/g' -e 's/^-//' | tr '[A-Z]' '[a-z]'
}


main "$@"
