#!/bin/bash


SCRIPT_PATH=`realpath $0`
SCRIPT_BASE_PATH=`dirname $SCRIPT_PATH`
. ${SCRIPT_BASE_PATH}/../Source/Bash/datalabs/environment/setup/venv.sh
PROJECT=
FORCE_OVERWRITE=false
MASTER_BUILD_PATH=
BUILD_PATH=


main() {
    process_arguments $*

    BUNDLE_DIRECTORY=${BUILD_PATH}/app
    ENVIRONMENT_DIRECTORY=${BUILD_PATH}/app

    create_bundle_directory $BUNDLE_DIRECTORY

    copy_source_files $BUNDLE_DIRECTORY

    copy_dependency_files

    zip_bundle_directory
}

process_arguments() {
    while (( "$#" )); do
      case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -z|--zip)
            FORCE_OVERWRITE=true
            shift
            ;;
        -f|--force)
            FORCE_OVERWRITE=true
            shift
            ;;
        *)
            PROJECT=$1
            shift
            shift
            ;;
      esac
    done

    if [[ "$SCHEMA" == "" ]]; then
        echo "Error: The database schema name was not specified."
        exit 1
    fi

    if [[ "$MODEL_MODULE" == "" ]]; then
        echo "Error: The model module was not specified."
        exit 1
    fi

    if [[ "$PROJECT" == "" ]]; then
        echo "Error: The name of the target project was not specified."
        exit 1
    fi

    MASTER_BUILD_PATH=${SCRIPT_BASE_PATH}/../Build/Master
    BUILD_PATH=${SCRIPT_BASE_PATH}/../Build/${PROJECT}
}


create_bundle_directory() {
    if [[ -d $BUNDLE_DIRECTORY ]]; then
        real_directory_path=`realpath ${DIRECTORY_PATH}`
        echo "Deleting old bundle directory ${real_directory_path}."

        # rm -rf $BUNDLE_DIRECTORY
    fi

    echo "Creating bundle directory ${real_directory_path}."
    mkdir -p 
}


copy_source_files() {
    echo pass
}


copy_dependency_files() {
    echo pass
}


zip_bundle_directory() {
    echo pass
}


print_usage() {
    echo "Usage: create-database-config [OPTION]... <project>"
    echo "Setup an initial Alembic configuration in ...Build/<project>/."
    echo
    echo "Options:"
    echo "  -h|--help                  Print usage."
    echo "  -s|--schema <schema>       Set the database schema name to use for tables."
    echo "  -m|--model-module <module> Set the fully-qualified Python module name that"
    echo "                             holds the SQLAlchemy declaritive base definition."
    echo "  -f, --force                Overwrite any directories or files that are created."
}




# echo "Executing create_pkg.sh..."

# cd $path_cwd
# dir_name=lambda_dist_pkg/
# mkdir $dir_name

# # Create and activate virtual environment...
# virtualenv -p $runtime env_$function_name
# source $path_cwd/env_$function_name/bin/activate

# # Installing python dependencies...
# FILE=$path_cwd/lambda_function/requirements.txt

# if [ -f "$FILE" ]; then
#   echo "Installing dependencies..."
#   echo "From: requirement.txt file exists..."
#   pip install -r "$FILE"

# else
#   echo "Error: requirement.txt does not exist!"
# fi

# # Deactivate virtual environment...
# deactivate

# # Create deployment package...
# echo "Creating deployment package..."
# cd env_$function_name/lib/$runtime/site-packages/
# cp -r . $path_cwd/$dir_name
# cp -r $path_cwd/lambda_function/ $path_cwd/$dir_name

# # Removing virtual environment folder...
# echo "Removing virtual environment folder..."
# rm -rf $path_cwd/env_$function_name

# echo "Finished script execution!"