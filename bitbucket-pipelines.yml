image:
  name: 644454719059.dkr.ecr.us-east-1.amazonaws.com/datalabs-bitbucket-pipelines:1.5.4
  aws:
    access-key: $AWS_ACCESS_KEY_ID_SANDBOX
    secret-key: $AWS_SECRET_ACCESS_KEY_SANDBOX

options:
  docker: true

definitions:
  services:
    docker:
      memory: 3072

pipelines:
    branches:
        master:
        - step:
            name: Build
            caches:
                - build-dependencies
            script:
            - bash Script/bitbucket-pipelines-build.sh
    tags:
        'datalabs-*_*.*.*':
        - step:
            name: Build Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - source Deploy/Master/release-info.sh $BITBUCKET_TAG
            - >-
                bash Deploy/Master/deploy-package --project ${PROJECT} --version ${RELEASE_VERSION}
    custom:
        ##############################################################
        # global targets
        ##############################################################

        Test:
        - step:
            name: Unit and Lint Tests
            caches:
                - test-dependencies
            script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Script/bitbucket-pipelines-test.sh


        ##############################################################
        # master branch targets
        ##############################################################

        AddressLoadCompiler:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project AddressLoad

        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project AddressLoad
                    --bundle Masterfile/AddressLoadCompilerDAG.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project AddressLoad
                    --bundle Masterfile/AddressLoadCompilerDAG.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project AddressLoad
                    --bundle Masterfile/AddressLoadCompilerDAG.zip

        - parallel:
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p Masterfile
                    AddressLoadCompilerDAG=AddressLoadCompilerDAG.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p Masterfile
                    AddressLoadCompilerDAG=AddressLoadCompilerDAG.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p Masterfile
                    AddressLoadCompilerDAG=AddressLoadCompilerDAG.zip

        AMC:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project AMC
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project AMC
                    --bundle Masterfile/AMC.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project AMC
                    --bundle Masterfile/AMC.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project AMC
                    --bundle Masterfile/AMC.zip
        - parallel:
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p Masterfile
                    AMC=AMC.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p Masterfile
                    AMC=AMC.zip

        AMC-Extract:
        - step:
            name: Create Task Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project AMC/Extract
        - parallel:
            - step:
                name: Update Sandbox Lambda Bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project AMC/Extract
                    --bundle Masterfile/AMC-Extract.zip
                    --jdbc-driver Informix
            - step:
                name: Update Test Lambda Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project AMC/Extract
                    --bundle Masterfile/AMC-Extract.zip
                    --jdbc-driver Informix
            - step:
                name: Update Production Lambda Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project AMC/Extract
                    --bundle Masterfile/AMC-Extract.zip
                    --jdbc-driver Informix
        - parallel:
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p Masterfile
                    AMC-Extract=AMC-Extract.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p Masterfile
                    AMC-Extract=AMC-Extract.zip

        Cerner:
        - step:
            name: Update Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project Cerner

        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip

        - parallel:
            - step:
                name: Reload Sandbox Lambda Function
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s DataLake -p CustomerIntelligence Cerner=Cerner.zip
            - step:
                name: Reload Development Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
                    -p CustomerIntelligence Cerner=Cerner.zip
            - step:
                name: Reload Test Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
                    -p CustomerIntelligence Cerner=Cerner.zip
            - step:
                name: Reload Production Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
                    -p CustomerIntelligence Cerner=Cerner.zip

        ContactID:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project ContactID
        - parallel:
            - step:
                name: Update sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
        - step:
            name: Reload Sandbox Lambda Functions
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/update-functions -e sbx -s DataLake -p CustomerIntelligence ContactID=ContactID.zip

   #         - step:
   #             name: Reload Development Lambda Functions
   #             script:
   #             - >-
   #                 bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
   #                 -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
   #             - >-
   #                 bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
   #                 -p CustomerIntelligence ContactID=ContactID.zip
   #         - step:
   #             name: Reload Test Lambda Functions
   #             script:
   #             - >-
   #                 bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
   #                 -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
   #             - >-
   #                 bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
   #                 -p CustomerIntelligence ContactID=ContactID.zip
   #         - step:
   #             name: Reload Production Lambda Functions
   #             script:
   #             - >-
   #                 bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
   #                 -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
   #             - >-
   #                 bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
   #                 -p CustomerIntelligence ContactID=ContactID.zip

        CPT-API-ETL:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/API/ETL
        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip

        - parallel:
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/API
                    JSON-DAG=ETL.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/API
                    JSON-DAG=ETL.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/API
                    JSON-DAG=ETL.zip

        CPT-API-Endpoint:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/API/Endpoint
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - >-
                        bash Deploy/Master/deploy-lambda-function
                        --environment sbx
                        --project CPT/API/Endpoint
                        --bundle CPT/API/Endpoint.zip
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
        - parallel:
            - step:
                name: Reload Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/API
                    JSON-API=Endpoint.zip
                    JSON-API-Authorizer=Endpoint.zip
                    ZIP-API=Endpoint.zip
                    ZIP-API-Authorizer=Endpoint.zip
                    SNOMED-API-Authorizer=Endpoint.zip
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/API
                    JSON-API=Endpoint.zip
                    JSON-API-Authorizer=Endpoint.zip
                    ZIP-API=Endpoint.zip
                    ZIP-API-Authorizer=Endpoint.zip
                    SNOMED-API-Authorizer=Endpoint.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i
                    Deploy/Master/update-functions -e tst -s CPT-API -p CPT/API
                    JSON-API=Endpoint.zip
                    JSON-API-Authorizer=Endpoint.zip
                    ZIP-API=Endpoint.zip
                    ZIP-API-Authorizer=Endpoint.zip
                    SNOMED-API-Authorizer=Endpoint.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/API
                    JSON-API=Endpoint.zip
                    JSON-API-Authorizer=Endpoint.zip
                    ZIP-API=Endpoint.zip
                    ZIP-API-Authorizer=Endpoint.zip
                    SNOMED-API-Authorizer=Endpoint.zip

        CPT-Files-Ingest:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/Files/Ingest
        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
        - parallel:
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/Files
                    Ingestion-DAG=Ingest.zip
        #     - step:
        #         name: Reload Test Lambda Functions
        #         script:
        #         - >-
        #             bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
        #             -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
        #         - >-
        #             bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/Files
        #             IngestionDAG=Ingest.zip
        #     - step:
        #         name: Reload Production Lambda Functions
        #         script:
        #         - >-
        #             bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
        #             -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
        #         - >-
        #             bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/Files
        #             IngestionDAG=Ingest.zip

        CPT-Files-Watermark:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/Files/Watermark
        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
        - parallel:
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/Files
                    Watermark-DAG=Watermark.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/Files
                    Watermark-DAG=Watermark.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/Files
                    Watermark-DAG=Watermark.zip

        CPT-Files-Build:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/Files/Build
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - >-
                        bash Deploy/Master/deploy-lambda-function
                        --environment sbx
                        --project CPT/Files/Build
                        --bundle CPT/Files/Build.zip
#            - step:
#                name: Update Development Lambda Bundle
#                caches:
#                    - environment-dev
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment dev
#                    --project CPT/Files/Build
#                    --bundle CPT/Files/Build.zip
#            - step:
#                name: Update Test Lambda Bundle
#                caches:
#                    - environment-test
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment tst
#                    --project CPT/Files/Build
#                    --bundle CPT/Files/Build.zip
#                    --jdbc-driver DB2
#                    --jdbc-driver Informix
#            - step:
#                name: Update Production Lambda Bundle
#                caches:
#                    - environment-prod
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment prd
#                    --project CPT/Files/Build
#                    --bundle CPT/Files/Build.zip
        - parallel:
            - step:
                name: Reload Sandbox Lambda Function
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/Files Builder-DAG=Build.zip
#            - step:
#                name: Reload Development Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/Files
#                    Builder-DAG=Build.zip
#            - step:
#                name: Reload Test Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/Files
#                    Builder-DAG=Build.zip
#            - step:
#                name: Reload Production Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT/Files -p CPT/Files
#                    Builder-DAG=Build.zip

        CPT-Files-Legacy:
        - step:
            name: Create Task Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/Files/Legacy
        - parallel:
            - step:
                name: Update Sandbox Lambda Bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/Files/Legacy
                    --bundle CPT/Files/Legacy.zip
            - step:
                name: Update Sandbox ECR Image
                caches:
                - environment-master
                script:
                - export ENVIRONMENT=sbx
                - export PROJECT=CPT/Files/Legacy

                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX

                - >-
                    Deploy/Master/deploy-container-image
                    --environment $ENVIRONMENT
                    --project $PROJECT
                    --repo cpt-files-$ENVIRONMENT
#            - step:
#                name: Update Development Lambda Bundle
#                caches:
#                    - environment-dev
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment dev
#                    --project CPT/Files/Legacy
#                    --bundle CPT/Files/Legacy.zip
#            - step:
#                name: Update Test Lambda Bundle
#                caches:
#                    - environment-dev
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment tst
#                    --project CPT/Files/Legacy
#                    --bundle CPT/Files/Legacy.zip
#            - step:
#                name: Update Production Lambda Bundle
#                caches:
#                    - environment-prod
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment prd
#                    --project CPT/Files/Legacy
#                    --bundle CPT/Files/Legacy.zip
        - parallel:
            - step:
                name: Reload Sandbox Lambda Function
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/Files Legacy-Task=Legacy.zip
#            - step:
#                name: Reload Development Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/Files
#                    Legacy-Task=Legacy.zip
#            - step:
#                name: Reload Test Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/Files
#                    Legacy-Task=Legacy.zip
#            - step:
#                name: Reload Production Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT/Files -p CPT/Files
#                    Legacy-Task=Legacy.zip

        CPT-KnowledgeBase-API:
            - step:
                  name: Create Development Component Package
                  caches:
                      - environment-master
                  script:
                      - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                      - bash Deploy/Master/deploy-package --project CPT/KnowledgeBase/API
            - parallel:
                    - step:
                            name: Update Sandbox Lambda Bundle
                            caches:
                                - environment-master
                            script:
                                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                                - >-
                                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                                    --environment sbx
                                    --project CPT/KnowledgeBase/API
                                    --bundle CPT/KnowledgeBase/API.zip
                    - step:
                        name: Update Development Bundle
                        caches:
                            - environment-dev
                        script:
                            - >-
                                bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                                -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                            - >-
                                bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                                --environment dev
                                --project CPT/KnowledgeBase/API
                                --bundle CPT/KnowledgeBase/API.zip
                    - step:
                        name: Update Test Bundle
                        caches:
                            - environment-test
                        script:
                            - >-
                                bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                                -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                            - >-
                                bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                                --environment tst
                                --project CPT/KnowledgeBase/API
                                --bundle CPT/KnowledgeBase/API.zip
                    - step:
                        name: Update Production Bundle
                        caches:
                            - environment-prod
                        script:
                            - >-
                                bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                                -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                            - >-
                                bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                                --environment prd
                                --project CPT/KnowledgeBase/API
                                --bundle CPT/KnowledgeBase/API.zip
            - parallel:
                    - step:
                            name: Reload Sandbox Lambda Functions
                            script:
                                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                                - >-
                                    bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/KnowledgeBase
                                    KnowledgeBase-API=API.zip
                                    KnowledgeBase-API-Authorizer=API.zip
                    - step:
                            name: Reload Development Lambda Functions
                            script:
                                - >-
                                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                                - >-
                                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/KnowledgeBase
                                    KnowledgeBase-API=API.zip
                                    KnowledgeBase-API-Authorizer=API.zip
                    - step:
                            name: Reload Test Lambda Functions
                            script:
                                - >-
                                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                                - >-
                                    bash --rcfile assume_role.rc -i
                                    Deploy/Master/update-functions -e tst -s CPT-API -p CPT/KnowledgeBase
                                    KnowledgeBase-API=API.zip
                                    KnowledgeBase-API-Authorizer=API.zip
                    - step:
                        name: Reload Production Lambda Functions
                        script:
                            - >-
                                bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                                -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                            - >-
                                bash --rcfile assume_role.rc -i
                                Deploy/Master/update-functions -e prd -s CPT-API -p CPT/KnowledgeBase
                                KnowledgeBase-API=API.zip
                                KnowledgeBase-API-Authorizer=API.zip

        CPT-KnowledgeBase-ETL:
        - step:
                name: Create Development Component Package
                caches:
                    - environment-master
                script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - bash Deploy/Master/deploy-package --project CPT/KnowledgeBase/ETL
        - parallel:
            - step:
                    name: Update Sandbox Lambda Bundle
                    caches:
                        - environment-master
                    script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment sbx
                        --project CPT/KnowledgeBase/ETL
                        --bundle CPT/KnowledgeBase/ETL.zip
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/KnowledgeBase/ETL
                    --bundle CPT/KnowledgeBase/ETL.zip
            - step:
                name: Update Test Lambda Bundle
                caches:
                   - environment-test
                script:
                - >-
                   bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                   -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                   bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                   --environment tst
                   --project CPT/KnowledgeBase/ETL
                   --bundle CPT/KnowledgeBase/ETL.zip
            - step:
                name: Update Production Lambda Bundle
                caches:
                   - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/KnowledgeBase/ETL
                    --bundle CPT/KnowledgeBase/ETL.zip
        - parallel:
            - step:
                name: Reload Sandbox Lambda Functions
                script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - >-
                        bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/KnowledgeBase
                        KnowledgeBase-DAG=ETL.zip
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/KnowledgeBase
                    KnowledgeBase-DAG=ETL.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/KnowledgeBase
                    KnowledgeBase-DAG=ETL.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/KnowledgeBase
                    KnowledgeBase-DAG=ETL.zip

        CPT-Vignettes-API:
            - step:
                name: Create Development Component Package
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/deploy-package --project CPT/Vignettes/API
            - parallel:
                - step:
                    name: Update Sandbox Lambda Bundle
                    caches:
                        - environment-master
                    script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment sbx
                        --project CPT/Vignettes/API
                        --bundle CPT/Vignettes/API.zip
                - step:
                    name: Update Development Bundle
                    caches:
                        - environment-dev
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment dev
                        --project CPT/Vignettes/API
                        --bundle CPT/Vignettes/API.zip
                - step:
                    name: Update Test Bundle
                    caches:
                        - environment-test
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment tst
                        --project CPT/Vignettes/API
                        --bundle CPT/Vignettes/API.zip
                - step:
                    name: Update Production Bundle
                    caches:
                        - environment-prod
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment prd
                        --project CPT/Vignettes/API
                        --bundle CPT/Vignettes/API.zip
            - parallel:
                - step:
                    name: Reload Sandbox Lambda Functions
                    script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - >-
                        bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/Vignettes
                        Vignettes-API=API.zip
                - step:
                    name: Reload Development Lambda Functions
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/Vignettes
                        Vignettes-API=API.zip
                # - step:
                #     name: Reload Test Lambda Functions
                #     script:
                #     - >-
                #         bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                #     - >-
                #         bash --rcfile assume_role.rc -i
                #         Deploy/Master/update-functions -e tst -s CPT-API -p CPT/Vignettes
                #         Vignettes-API=API.zip
                # - step:
                #     name: Reload Production Lambda Functions
                #     script:
                #     - >-
                #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                #     - >-
                #         bash --rcfile assume_role.rc -i
                #         Deploy/Master/update-functions -e prd -s CPT-API -p CPT/Vignettes
                #         Vignettes-API=API.zip

        CPT-Vignettes-ETL:
            - step:
                name: Create Development Component Package
                caches:
                    - environment-master
                script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - bash Deploy/Master/deploy-package --project CPT/Vignettes/ETL
            - parallel:
                - step:
                    name: Update Sandbox Lambda Bundle
                    caches:
                        - environment-master
                    script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment sbx
                        --project CPT/Vignettes/ETL
                        --bundle CPT/Vignettes/ETL.zip
                - step:
                    name: Update Development Lambda Bundle
                    caches:
                        - environment-dev
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment dev
                        --project CPT/Vignettes/ETL
                        --bundle CPT/Vignettes/ETL.zip
                - step:
                    name: Update Test Lambda Bundle
                    caches:
                    - environment-test
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment tst
                        --project CPT/Vignettes/ETL
                        --bundle CPT/Vignettes/ETL.zip
                - step:
                    name: Update Production Lambda Bundle
                    caches:
                    - environment-prod
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment prd
                        --project CPT/Vignettes/ETL
                        --bundle CPT/Vignettes/ETL.zip
            - parallel:
                - step:
                    name: Reload Sandbox Lambda Functions
                    script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - >-
                        bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/Vignettes
                        Vignettes-DAG=ETL.zip
                - step:
                    name: Reload Development Lambda Functions
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/Vignettes
                        Vignettes-DAG=ETL.zip
                # - step:
                #     name: Reload Test Lambda Functions
                #     script:
                #     - >-
                #         bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                #     - >-
                #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/Vignettes
                #         Vignettes-DAG=ETL.zip
                # - step:
                #     name: Reload Production Lambda Functions
                #     script:
                #     - >-
                #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                #     - >-
                #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/Vignettes
                #         Vignettes-DAG=ETL.zip

        DBL:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project DBL
        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project DBL
                    --bundle Masterfile/DBLReport.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project DBL
                    --bundle Masterfile/DBLReport.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project DBL
                    --bundle Masterfile/DBLReport.zip
        - parallel:
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p Masterfile DBLReport=DBLReport.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p Masterfile DBLReport=DBLReport.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p Masterfile DBLReport=DBLReport.zip

        ExpressDAG-DAG:
        - step:
            name: Update Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project ExpressDAG/DAG

        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project ExpressDAG/DAG
                    --bundle ExpressDAG-DAG.zip
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project ExpressDAG/DAG
                    --bundle ExpressDAG-DAG.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project ExpressDAG/DAG
                    --bundle ExpressDAG-DAG.zip
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project ExpressDAG/DAG
                    --bundle ExpressDAG-DAG.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project ExpressDAG/DAG
                    --bundle ExpressDAG-DAG.zip

        - parallel:
            - step:
                name: Reload Sandbox Lambda Function
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s DataLake ExpressDAG-DAG=ExpressDAG-DAG.zip
            # - step:
            #     name: Reload Development Lambda Function
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
            #         ExpressDAG-DAG=ExpressDAG-DAG.zip
            # - step:
            #     name: Reload Test Lambda Function
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
            #         ExpressDAG-DAG=ExpressDAG-DAG.zip
            # - step:
            #     name: Reload Staging Lambda Function
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s DataLake
            #         ExpressDAG-DAG=ExpressDAG-DAG.zip
            # - step:
            #     name: Reload Production Lambda Function
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
            #         ExpressDAG-DAG=ExpressDAG-DAG.zip

        HelloWorld:
        - step:
            name: Update Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project HelloWorld

        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project HelloWorld
                    --bundle HelloWorld.zip
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip

        - parallel:
            - step:
                name: Reload Sandbox Lambda Function
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s DataLake HelloWorld=HelloWorld.zip
            # - step:
            #     name: Reload Development Lambda Function
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
            #         HelloWorld=HelloWorld.zip
            # - step:
            #     name: Reload Test Lambda Function
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
            #         HelloWorld=HelloWorld.zip
            # - step:
            #     name: Reload Staging Lambda Function
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s DataLake
            #         HelloWorld=HelloWorld.zip
            # - step:
            #     name: Reload Production Lambda Function
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
            #         HelloWorld=HelloWorld.zip

        HelloWorldJava-DAG:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project HelloWorldJava/DAG
        - step:
            name: Update Lambda Bundle
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - >-
                bash Deploy/Master/deploy-lambda-function
                --environment sbx
                --project HelloWorldJava/DAG
                --bundle HelloWorldJava/DAG.zip
        - step:
            name: Update Lambda Functions
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/update-functions -e sbx -s DataLake -p HelloWorldJava HelloWorldJavaDAG=DAG.zip

        HelloWorldJava-Task:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project HelloWorldJava/Task
        - parallel:
            - step:
                name: Update Lambda bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project HelloWorldJava/Task
                    --bundle HelloWorldJava/Task.zip
            - step:
                name: Update ECR Image
                caches:
                - environment-master
                script:
                - export ENVIRONMENT=sbx
                - export PROJECT=HelloWorldJava/Task

                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX

                - >-
                    Deploy/Master/deploy-container-image
                    --environment $ENVIRONMENT
                    --project $PROJECT
                    --repo hello_world_java-$ENVIRONMENT
        - step:
            name: Reload Lambda Function
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/update-functions -e sbx -s DataLake -p HelloWorldJava HelloWorldJavaTask=Task.zip

        IntelligentPlatform:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project IntelligentPlatform
        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project IntelligentPlatform
                    --bundle IntelligentPlatform/DAG.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project IntelligentPlatform
                    --bundle IntelligentPlatform/DAG.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project IntelligentPlatform
                    --bundle IntelligentPlatform/DAG.zip
        - parallel:
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s AIP -p IntelligentPlatform
                    DAG=DAG.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s AIP -p IntelligentPlatform
                    DAG=DAG.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s AIP -p IntelligentPlatform
                    DAG=DAG.zip

        IntelligentPlatform-Developer:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project IntelligentPlatform/Developer
        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project IntelligentPlatform/Developer
                    --bundle IntelligentPlatform/DeveloperDAG.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project IntelligentPlatform/Developer
                    --bundle IntelligentPlatform/DeveloperDAG.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project IntelligentPlatform/Developer
                    --bundle IntelligentPlatform/DeveloperDAG.zip
        - parallel:
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s AIP -p IntelligentPlatform
                    DeveloperDAG=DeveloperDAG.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s AIP -p IntelligentPlatform
                    DeveloperDAG=DeveloperDAG.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s AIP -p IntelligentPlatform
                    DeveloperDAG=DeveloperDAG.zip

        IntelligentPlatform-Licensing:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project IntelligentPlatform/Licensing
        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project IntelligentPlatform/Licensing
                    --bundle IntelligentPlatform/LicensingDAG.zip
            - step:
                name: Update Test Bundle
                caches:
                - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project IntelligentPlatform/Licensing
                    --bundle IntelligentPlatform/LicensingDAG.zip
            - step:
                name: Update Production Bundle
                caches:
                - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project IntelligentPlatform/Licensing
                    --bundle IntelligentPlatform/LicensingDAG.zip
        - parallel:
             - step:
                   name: Reload Development Lambda Function
                   script:
                       - >-
                           bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                           -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                       - >-
                           bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s AIP
                           -p IntelligentPlatform LicensingDAG=LicensingDAG.zip
             - step:
                   name: Reload Test Lambda Function
                   script:
                       - >-
                           bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                           -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                       - >-
                           bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s AIP
                           -p IntelligentPlatform LicensingDAG=LicensingDAG.zip
             - step:
                   name: Reload Production Lambda Function
                   script:
                       - >-
                           bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                           -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                       - >-
                           bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s AIP
                           -p IntelligentPlatform LicensingDAG=LicensingDAG.zip

        LicenseMovement:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project LicenseMovement
        - parallel:
#            - step:
#                name: Update Development Bundle
#                caches:
#                    - environment-dev
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment dev
#                    --project LicenseMovement
#                    --bundle Masterfile/LicenseMovementDAG.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project LicenseMovement
                    --bundle Masterfile/LicenseMovementDAG.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project LicenseMovement
                    --bundle Masterfile/LicenseMovementDAG.zip
        - parallel:
#            - step:
#                name: Reload Development Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p Masterfile
#                    LicenseMovementDAG=LicenseMovementDAG.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p Masterfile LicenseMovementDAG=LicenseMovementDAG.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p Masterfile LicenseMovementDAG=LicenseMovementDAG.zip

        LicenseMovement-Extract:
        - step:
            name: Create Task Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project LicenseMovement/Extract
        - parallel:
#            - step:
#                name: Update Development Lambda Bundle
#                caches:
#                    - environment-dev
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment dev
#                    --project LicenseMovement/Extract
#                    --bundle Masterfile/LicenseMovement-Extract.zip
#                    --jdbc-driver Informix
            - step:
                name: Update Test Lambda Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project LicenseMovement/Extract
                    --bundle Masterfile/LicenseMovement-Extract.zip
                    --jdbc-driver Informix
            - step:
                name: Update Production Lambda Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project LicenseMovement/Extract
                    --bundle Masterfile/LicenseMovement-Extract.zip
                    --jdbc-driver Informix
        - parallel:
#            - step:
#                name: Reload Development Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p Masterfile
#                    LicenseMovement-Extract=LicenseMovement-Extract.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p Masterfile
                    LicenseMovement-Extract=LicenseMovement-Extract.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p Masterfile
                    LicenseMovement-Extract=LicenseMovement-Extract.zip

        Marketing-Aggregator:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project Marketing/Aggregator
        - parallel:
            - step:
                name: Update Sandbox Lambda Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project Marketing/Aggregator
                    --bundle CustomerIntelligence/MarketingAggregatorDAG.zip
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project Marketing/Aggregator
                    --bundle CustomerIntelligence/MarketingAggregatorDAG.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project Marketing/Aggregator
                    --bundle CustomerIntelligence/MarketingAggregatorDAG.zip
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project Marketing/Aggregator
                    --bundle CustomerIntelligence/MarketingAggregatorDAG.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project Marketing/Aggregator
                    --bundle CustomerIntelligence/MarketingAggregatorDAG.zip
        - parallel:
#            - step:
#                name: Reload Sandbox Lambda Functions
#                script:
#                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                - >-
#                    bash Deploy/Master/update-functions -e sbx -s DataLake
#                    MarketingAggregator-DAG=MarketingAggregatorDAG.zip
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake -p CustomerIntelligence
                    MarketingAggregator-DAG=MarketingAggregatorDAG.zip
#            - step:
#                name: Reload Test Lambda Function
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake -p CustomerIntelligence
#                    MarketingAggregatorDAG=MarketingAggregatorDAG.zip
#            - step:
#                name: Reload Staging Lambda Function
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake -p CustomerIntelligence
#                    AggregatorDAG=MarketingAggregatorDAG.zip
#            - step:
#                name: Reload Production Lambda Function
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake -p CustomerIntelligence
#                    AggregatorDAG=MarketingAggregatorDAG.zip

        OneView-API:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project OneView/API
        - parallel:
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project OneView/API
                    --bundle OneView/API.zip
            - step:
                name: Update Test Lambda Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project OneView/API
                    --bundle OneView/API.zip
            - step:
                name: Update Production Lambda Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project OneView/API
                    --bundle OneView/API.zip
        - parallel:
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p OneView
                    API=API.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p OneView
                    API=API.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p OneView
                    API=API.zip

        OneView-ETL:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project OneView/ETL
        - parallel:
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project OneView/ETL
                    --bundle OneView/ETL.zip
            - step:
                name: Update Test Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project OneView/ETL
                    --bundle OneView/ETL.zip
            - step:
                name: Update Production Lambda Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project OneView/ETL
                    --bundle OneView/ETL.zip
        - parallel:
            - step:
                name: Reload Development Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p OneView
                    ETL=ETL.zip
            - step:
                name: Reload Test Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p OneView
                    ETL=ETL.zip
            - step:
                name: Reload Production Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p OneView
                    ETL=ETL.zip

        OneView-ETL-Batch:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project OneView/ETL/Batch
        - parallel:
            - step:
                name: Update Development Batch Job Image
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -N ecr -I $AWS_ACCESS_KEY_ID_SHARED -S $AWS_SECRET_ACCESS_KEY_SHARED
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-container-image
                    --environment dev
                    --project OneView/ETL/Batch
                    --repo oneview-dev
            - step:
                name: Update Test Batch Job Image
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -N ecr -I $AWS_ACCESS_KEY_ID_SHARED -S $AWS_SECRET_ACCESS_KEY_SHARED
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-container-image
                    --environment tst
                    --project OneView/ETL/Batch
                    --repo oneview-tst
            - step:
                name: Update Production Batch Job Image
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -N ecr -I $AWS_ACCESS_KEY_ID_SHARED -S $AWS_SECRET_ACCESS_KEY_SHARED
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-container-image
                    --environment prd
                    --project OneView/ETL/Batch
                    --repo oneview-prd

        OneView-ETL-Extract:
        - step:
            name: Create Task Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project OneView/ETL/Extract
        - parallel:
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project OneView/ETL/Extract
                    --bundle OneView/Extract.zip
                    --jdbc-driver DB2
                    --jdbc-driver Informix
            - step:
                name: Update Test Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project OneView/ETL/Extract
                    --bundle OneView/Extract.zip
                    --jdbc-driver DB2
                    --jdbc-driver Informix
            - step:
                name: Update Production Lambda Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project OneView/ETL/Extract
                    --bundle OneView/Extract.zip
                    --jdbc-driver DB2
                    --jdbc-driver Informix
        - parallel:
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p OneView
                    Extract=Extract.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p OneView
                    Extract=Extract.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p OneView
                    Extract=Extract.zip

        Scheduler:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project Scheduler
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project Scheduler
                    --bundle Scheduler.zip
            - step:
                name: Update Development Bundle
                caches:
                - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project Scheduler
                    --bundle Scheduler.zip
            - step:
                name: Update Test Bundle
                caches:
                - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project Scheduler
                    --bundle Scheduler.zip
            - step:
                name: Update Staging Bundle
                caches:
                - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project Scheduler
                    --bundle Scheduler.zip
            - step:
                name: Update Production Bundle
                caches:
                - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project Scheduler
                    --bundle Scheduler.zip
        - parallel:
            - step:
                name: Reload Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/update-functions -e sbx -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
                    TriggerProcessor=Scheduler.zip
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
                    TriggerProcessor=Scheduler.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
                    TriggerProcessor=Scheduler.zip
            - step:
                name: Reload Staging Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
                    TriggerProcessor=Scheduler.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
                    TriggerProcessor=Scheduler.zip

        SNOMED-CPT-API:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/SNOMED/API
        - parallel:
            - step:
                name: Update Sandbox Lambda Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/SNOMED/API
                    --bundle CPT/SNOMED/API.zip
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/SNOMED/API
                    --bundle CPT/SNOMED/API.zip
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/SNOMED/API
                    --bundle CPT/SNOMED/API.zip
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/SNOMED/API
                    --bundle CPT/SNOMED/API.zip
        - parallel:
#             - step:
#                 name: Reload Sandbox Lambda Functions
#                 script:
#                 - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                 - >-
#                     bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/SNOMED
#                     SNOMED-API=API.zip
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/SNOMED
                    SNOMED-API=API.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i
                    Deploy/Master/update-functions -e tst -s CPT-API -p CPT/SNOMED
                    SNOMED-API=API.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i
                    Deploy/Master/update-functions -e prd -s CPT-API -p CPT/SNOMED
                    SNOMED-API=API.zip

        SNOMED-CPT-ETL:
        - step:
                name: Create Development Component Package
                caches:
                    - environment-master
                script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - bash Deploy/Master/deploy-package --project CPT/SNOMED/ETL
        - parallel:
            - step:
                name: Update Sandbox Lambda Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/SNOMED/ETL
                    --bundle CPT/SNOMED/ETL.zip
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/SNOMED/ETL
                    --bundle CPT/SNOMED/ETL.zip
            - step:
                name: Update Test Lambda Bundle
                caches:
                   - environment-test
                script:
                - >-
                   bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                   -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                   bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                   --environment tst
                   --project CPT/SNOMED/ETL
                   --bundle CPT/SNOMED/ETL.zip
            - step:
                name: Update Production Lambda Bundle
                caches:
                   - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/SNOMED/ETL
                    --bundle CPT/SNOMED/ETL.zip
        - parallel:
            - step:
                name: Reload Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/SNOMED
                    SNOMED-DAG=ETL.zip
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/SNOMED
                    SNOMED-DAG=ETL.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/SNOMED
                    SNOMED-DAG=ETL.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/SNOMED
                    SNOMED-DAG=ETL.zip

        VeriCre-API:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project VeriCre/API/Profile
        - parallel:
            - step:
                name: Update sandbox Bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project VeriCre/API/Profile
                    --bundle VeriCre/API/Profile.zip
            - step:
                name: Update Development Bundle
                caches:
                - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project VeriCre/API/Profile
                    --bundle VeriCre/API/Profile.zip
            - step:
                name: Update Test Bundle
                caches:
                - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project VeriCre/API/Profile
                    --bundle VeriCre/API/Profile.zip
            - step:
                name: Update Staging Bundle
                caches:
                - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project VeriCre/API/Profile
                    --bundle VeriCre/API/Profile.zip
            - step:
                name: Update Production Bundle
                caches:
                - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project VeriCre/API/Profile
                    --bundle VeriCre/API/Profile.zip
        - parallel:
            - step:
                name: Reload Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/update-functions -e sbx -s VeriCre -p VeriCre/API
                    Profiles-API=Profile.zip
                    Authorizer=Profile.zip
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s VeriCre -p VeriCre/API
                    Profiles-API=Profile.zip
                    Authorizer=Profile.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s VeriCre -p VeriCre/API
                    Profiles-API=Profile.zip
                    Authorizer=Profile.zip
            - step:
                name: Reload Staging Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s VeriCre -p VeriCre/API
                    Profiles-API=Profile.zip
                    Authorizer=Profile.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s VeriCre -p VeriCre/API
                    Profiles-API=Profile.zip
                    Authorizer=Profile.zip


        VeriCre-ETL:
            - step:
                name: Create Development Component Package
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/deploy-package --project VeriCre/ETL/Profile
            - parallel:
                - step:
                    name: Update sandbox Bundle
                    caches:
                    - environment-master
                    script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - >-
                        bash Deploy/Master/deploy-lambda-function
                        --environment sbx
                        --project VeriCre/ETL/Profile
                        --bundle VeriCre/ETL/Profile.zip
                - step:
                    name: Update Development Bundle
                    caches:
                    - environment-dev
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment dev
                        --project VeriCre/ETL/Profile
                        --bundle VeriCre/ETL/Profile.zip
                - step:
                    name: Update Test Bundle
                    caches:
                    - environment-test
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment tst
                        --project VeriCre/ETL/Profile
                        --bundle VeriCre/ETL/Profile.zip
                - step:
                    name: Update Staging Bundle
                    caches:
                    - environment-stage
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment itg
                        --project VeriCre/ETL/Profile
                        --bundle VeriCre/ETL/Profile.zip
                - step:
                    name: Update Production Bundle
                    caches:
                    - environment-prod
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                        --environment prd
                        --project VeriCre/ETL/Profile
                        --bundle VeriCre/ETL/Profile.zip
            - parallel:
                - step:
                    name: Reload Sandbox Lambda Functions
                    script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - >-
                        bash Deploy/Master/update-functions -e sbx -s VeriCre -p VeriCre/ETL
                        Profiles-DAG=Profile.zip
                - step:
                    name: Reload Development Lambda Functions
                    script:
                    - >-
                        bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                        -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                    - >-
                        bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s VeriCre -p VeriCre/ETL
                        Profiles-DAG=Profile.zip

        DEUS-API:
            - step:
                    name: Create Development Component Package
                    caches:
                    - environment-master
                    script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - bash Deploy/Master/deploy-package --project DEUS/API
            - parallel:
                - step:
                    name: Update sandbox Bundle
                    caches:
                    - environment-master
                    script:
                    - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    - >-
                        bash Deploy/Master/deploy-lambda-function
                        --environment sbx
                        --project DEUS/API
                        --bundle DEUS/API.zip
                # - step:
                #     name: Update Development Bundle
                #     caches:
                #     - environment-dev
                #     script:
                #     - >-
                #         bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                #     - >-
                #         bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                #         --environment dev
                #         --project DEUS/API
                #         --bundle DEUS/API.zip
                # - step:
                #     name: Update Test Bundle
                #     caches:
                #     - environment-test
                #     script:
                #     - >-
                #         bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                #     - >-
                #         bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                #         --environment tst
                #         --project DEUS/API
                #         --bundle DEUS/API.zip
                # - step:
                #     name: Update Production Bundle
                #     caches:
                #     - environment-prod
                #     script:
                #     - >-
                #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                #     - >-
                #         bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                #         --environment prd
                #         --project DEUS/API
                #         --bundle DEUS/API.zip

            # - parallel:
                # - step:
                #     name: Reload Sandbox Lambda Functions
                #     script:
                #     - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #     - >-
                #         bash Deploy/Master/update-functions -e sbx -s DEUS-API -p DEUS/API
                #         DEUS-API=DEUS.zip
                # - step:
                #     name: Reload Development Lambda Functions
                #     script:
                #     - >-
                #         bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                #     - >-
                #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DEUS-API -p DEUS/API
                #         DEUS-API=DEUS.zip
                # - step:
                #     name: Reload Test Lambda Functions
                #     script:
                #     - >-
                #         bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                #     - >-
                #         bash --rcfile assume_role.rc -i
                #         Deploy/Master/update-functions -e tst -s DEUS-API -p DEUS/API
                #         DEUS-API=DEUS.zip
                # - step:
                #     name: Reload Staging Lambda Functions
                #     script:
                #     - >-
                #         bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                #     - >-
                #         bash --rcfile assume_role.rc -i
                #         Deploy/Master/update-functions -e itg -s DEUS-API -p DEUS/API
                #         DEUS-API=DEUS.zip
                # - step:
                #     name: Reload Production Lambda Functions
                #     script:
                #     - >-
                #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                #     - >-
                #         bash --rcfile assume_role.rc -i
                #         Deploy/Master/update-functions -e prd -s DEUS-API -p DEUS/API -p DEUS/API
                #         DEUS-API=DEUS.zip

definitions:
  caches:
    build-dependencies: Environment
    test-dependencies: Environment

    environment-master: Environment
    environment-dev: Environment
    environment-test: Environment
    environment-stage: Environment
    environment-prod: Environment
