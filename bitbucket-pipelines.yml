image:
  name: 644454719059.dkr.ecr.us-east-1.amazonaws.com/datalabs-bitbucket-pipelines:1.5.3
  aws:
    access-key: $AWS_ACCESS_KEY_ID_SANDBOX
    secret-key: $AWS_SECRET_ACCESS_KEY_SANDBOX

options:
  docker: true

pipelines:
    branches:
        master:
        - step:
            name: Build
            caches:
                - build-dependencies
            script:
            - bash Script/bitbucket-pipelines-build.sh
    tags:
        'datalabs-*_*.*.*':
        - step:
            name: Build Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - source Deploy/Master/release-info.sh $BITBUCKET_TAG
            - >-
                bash Deploy/Master/deploy-package --project ${PROJECT} --version ${RELEASE_VERSION}
    custom:
        ##############################################################
        # global targets
        ##############################################################

        Test:
        - step:
            name: Unit and Lint Tests
            caches:
                - test-dependencies
            script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Script/bitbucket-pipelines-test.sh


        ##############################################################
        # master branch targets
        ##############################################################

        AMC:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project AMC
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project AMC
                    --bundle Masterfile/AMC.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project AMC
                    --bundle Masterfile/AMC.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project AMC
                    --bundle Masterfile/AMC.zip
                    --use-package
        - parallel:
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p Masterfile
                    AMC=AMC.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p Masterfile
                    AMC=AMC.zip

        AMC-Extract:
        - step:
            name: Create Task Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project AMC/Extract
        - parallel:
            - step:
                name: Update Sandbox Lambda Bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project AMC/Extract
                    --bundle Masterfile/AMC-Extract.zip
                    --jdbc-driver Informix
                    --use-package
            - step:
                name: Update Test Lambda Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project AMC/Extract
                    --bundle Masterfile/AMC-Extract.zip
                    --jdbc-driver Informix
                    --use-package
            - step:
                name: Update Production Lambda Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project AMC/Extract
                    --bundle Masterfile/AMC-Extract.zip
                    --jdbc-driver Informix
                    --use-package
        - parallel:
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p Masterfile
                    AMC-Extract=AMC-Extract.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p Masterfile
                    AMC-Extract=AMC-Extract.zip

        HelloWorld:
        - step:
            name: Update Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project HelloWorld

        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project HelloWorld
                    --bundle HelloWorld.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip
                    --use-package

        - parallel:
            - step:
                name: Update Sandbox Lambda Function
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s DataLake HelloWorld=HelloWorld.zip
            - step:
                name: Update Development Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
                    HelloWorld=HelloWorld.zip
            - step:
                name: Update Test Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
                    HelloWorld=HelloWorld.zip
            - step:
                name: Update Staging Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s DataLake
                    HelloWorld=HelloWorld.zip
            # - step:
            #     name: Update Production Lambda Function
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
            #         HelloWorld=HelloWorld.zip

        Cerner:
        - step:
            name: Update Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project Cerner

        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
                    --use-package

        - parallel:
            - step:
                name: Update Sandbox Lambda Function
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s DataLake -p CustomerIntelligence Cerner=Cerner.zip
            - step:
                name: Update Development Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
                    -p CustomerIntelligence Cerner=Cerner.zip
            - step:
                name: Update Test Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
                    -p CustomerIntelligence Cerner=Cerner.zip
            - step:
                name: Update Staging Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s DataLake
                    -p CustomerIntelligence Cerner=Cerner.zip
            - step:
                name: Update Production Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
                    -p CustomerIntelligence Cerner=Cerner.zip

        ContactID:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project ContactID
        - parallel:
            - step:
                name: Update sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
                    --use-package
            - step:
                name: Update development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
                    --use-package
            - step:
                name: Update test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
                    --use-package
            - step:
                name: Update staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
                    --use-package
            - step:
                name: Update production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
                    --use-package
        - step:
            name: Update sandbox Lambda Functions
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/update-functions -e sbx -s DataLake -p CustomerIntelligence ContactID=ContactID.zip

   #         - step:
   #             name: Update development Lambda Functions
   #             script:
   #             - >-
   #                 bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
   #                 -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
   #             - >-
   #                 bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
   #                 -p CustomerIntelligence ContactID=ContactID.zip
   #         - step:
   #             name: Update test Lambda Functions
   #             script:
   #             - >-
   #                 bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
   #                 -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
   #             - >-
   #                 bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
   #                 -p CustomerIntelligence ContactID=ContactID.zip
   #         - step:
   #             name: Update production Lambda Functions
   #             script:
   #             - >-
   #                 bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
   #                 -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
   #             - >-
   #                 bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
   #                 -p CustomerIntelligence ContactID=ContactID.zip

        CPT-API-ETL:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/API/ETL
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
                    --use-package

        - parallel:
            - step:
                name: Update Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/API ETL=ETL.zip
            - step:
                name: Update Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/API
                    ETL=ETL.zip
            - step:
                name: Update Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/API
                    ETL=ETL.zip
            - step:
                name: Update Staging Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s CPT-API -p CPT/API
                    ETL=ETL.zip
            - step:
                name: Update Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/API
                    ETL=ETL.zip

        CPT-API-Endpoint:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/API/Endpoint
        - parallel:
            - step:
                name: Update sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
                    --use-package
        - parallel:
            - step:
                name: Update Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/API
                    Authorizer=Endpoint.zip
                    Endpoint=Endpoint.zip
                    BulkAuthorizer=Endpoint.zip
                    BulkEndpoint=Endpoint.zip
            - step:
                name: Update Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/API
                    Authorizer=Endpoint.zip
                    Endpoint=Endpoint.zip
                    BulkAuthorizer=Endpoint.zip
                    BulkEndpoint=Endpoint.zip
            - step:
                name: Update Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i
                    Deploy/Master/update-functions -e tst -s CPT-API -p CPT/API
                    Authorizer=Endpoint.zip
                    Endpoint=Endpoint.zip
                    BulkAuthorizer=Endpoint.zip
                    BulkEndpoint=Endpoint.zip
            - step:
                name: Update Staging Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i
                    Deploy/Master/update-functions -e itg -s CPT-API -p CPT/API
                    Authorizer=Endpoint.zip
                    Endpoint=Endpoint.zip
                    BulkAuthorizer=Endpoint.zip
                    BulkEndpoint=Endpoint.zip
            - step:
                name: Update Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/API
                    Authorizer=Endpoint.zip
                    Endpoint=Endpoint.zip
                    BulkAuthorizer=Endpoint.zip
                    BulkEndpoint=Endpoint.zip

        CPT-Files-Ingest:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/Files/Ingest
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
                    --use-package
            - step:
                name: Update test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
                    --use-package
        - parallel:
            - step:
                name: Update Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/Files IngestionDAG=Ingest.zip
            - step:
                name: Update Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/Files
                    IngestionDAG=Ingest.zip
        #     - step:
        #         name: Update Test Lambda Functions
        #         script:
        #         - >-
        #             bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
        #             -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
        #         - >-
        #             bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/Files
        #             IngestionDAG=Ingest.zip
        #     - step:
        #         name: Update Production Lambda Functions
        #         script:
        #         - >-
        #             bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
        #             -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
        #         - >-
        #             bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/Files
        #             IngestionDAG=Ingest.zip
        #     - step:
        #         name: Update Production Lambda Functions
        #         script:
        #         - >-
        #             bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
        #             -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
        #         - >-
        #             bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/Files
        #             IngestionDAG=Ingest.zip

        AddressLoadCompiler:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project AddressLoad
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project AddressLoad
                    --bundle Masterfile/AddressLoadCompilerDAG.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project AddressLoad
                    --bundle Masterfile/AddressLoadCompilerDAG.zip
                    --use-package
#            - step:
#                name: Update Test Bundle
#                caches:
#                    - environment-test
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment tst
#                    --project AddressLoad
#                    --bundle Masterfile/AddressLoadCompilerDAG.zip
#                    --use-package
#            - step:
#                name: Update Production Bundle
#                caches:
#                    - environment-prod
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment prd
#                    --project AddressLoad
#                    --bundle Masterfile/AddressLoadCompilerDAG.zip
#                    --use-package


#        - parallel:
#            - step:
#                name: Update Sandbox Lambda Functions
#                script:
#                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                - bash Deploy/Master/update-functions -e sbx -s AddressLoad -p Masterfile AddressLoadCompilerDAG=AddressLoadCompilerDAG.zip
#            - step:
#                name: Update Development Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s AddressLoad -p Masterfile
#                    AddressLoadCompilerDAG=AddressLoadCompilerDAG.zip
#            - step:
#                name: Update Test Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s AddressLoad -p Masterfile
#                    AddressLoadCompilerDAG=AddressLoadCompilerDAG.zip
#            - step:
#                name: Update Production Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s AddressLoad -p Masterfile
#                    AddressLoadCompilerDAG=AddressLoadCompilerDAG.zip


        LicenseMovement:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project LicenseMovement
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project LicenseMovement
                    --bundle Masterfile/LicenseMovementDAG.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project LicenseMovement
                    --bundle Masterfile/LicenseMovementDAG.zip
                    --use-package
#            - step:
#                name: Update test Bundle
#                caches:
#                    - environment-test
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment tst
#                    --project LicenseMovement
#                    --bundle Masterfile/LicenseMovementDAG.zip
#                    --use-package
#            - step:
#                name: Update Production Bundle
#                caches:
#                    - environment-prod
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment prd
#                    --project LicenseMovement
#                    --bundle Masterfile/LicenseMovementDAG.zip
#                    --use-package
#        - parallel:
#            - step:
#                name: Update Sandbox Lambda Functions
#                script:
#                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                - bash Deploy/Master/update-functions -e sbx -s LicenseMovement -p Masterfile LicenseMovementDAG=LicenseMovementDAG.zip
#            - step:
#                name: Update Development Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s LicenseMovement -p Masterfile
#                    LicenseMovementDAG=LicenseMovementDAG.zip
#            - step:
#                name: Update test Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s LicenseMovement -p Masterfile LicenseMovementDAG=LicenseMovementDAG.zip
#            - step:
#                name: Update production Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s LicenseMovement -p Masterfile LicenseMovementDAG=LicenseMovementDAG.zip

        LicenseMovement-Extract:
        - step:
            name: Create Task Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project LicenseMovement-Extract
        - parallel:
            - step:
                name: Update Sandbox Lambda Bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project LicenseMovement-Extract
                    --bundle Masterfile/LicenseMovement-Extract.zip
                    --jdbc-driver Informix
                    --use-package
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project LicenseMovement-Extract
                    --bundle Masterfile/LicenseMovement-Extract.zip
                    --jdbc-driver Informix
                    --use-package
#            - step:
#                name: Update Test Lambda Bundle
#                caches:
#                    - environment-test
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment tst
#                    --project LicenseMovement-Extract
#                    --bundle Masterfile/LicenseMovement-Extract.zip
#                    --jdbc-driver Informix
#                    --use-package
#            - step:
#                name: Update Production Lambda Bundle
#                caches:
#                    - environment-prod
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment prd
#                    --project LicenseMovement-Extract
#                    --bundle Masterfile/LicenseMovement-Extract.zip
#                    --jdbc-driver Informix
#                    --use-package
#        - parallel:
#            - step:
#                name: Reload Sandbox Lambda Functions
#                script:
#                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                - bash Deploy/Master/update-functions -e sbx -s LicenseMovement-Extract -p Masterfile LicenseMovementDAG=LicenseMovementDAG.zip
#            - step:
#                name: Reload Development Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s LicenseMovement-Extract -p Masterfile
#                    LicenseMovement-Extract=LicenseMovement-Extract.zip
#            - step:
#                name: Reload Test Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s LicenseMovement-Extract -p Masterfile
#                    LicenseMovement-Extract=LicenseMovement-Extract.zip
#            - step:
#                name: Reload Production Lambda Functions
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s LicenseMovement-Extract -p Masterfile
#                    LicenseMovement-Extract=LicenseMovement-Extract.zip


        CPT-Files-Watermark:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/Files/Watermark
        - parallel:
            - step:
                name: Update sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
                    --use-package
            - step:
                name: Update development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
                    --use-package
            - step:
                name: Update test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
                    --use-package
            - step:
                name: Update staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
                    --use-package
            - step:
                name: Update production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
                    --use-package
        - parallel:
            - step:
                name: Update sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/Files WatermarkDAG=Watermark.zip
            - step:
                name: Update development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/Files
                    WatermarkDAG=Watermark.zip
            # - step:
            #     name: Update test Lambda Functions
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/Files
            #         WatermarkDAG=Watermark.zip
            # - step:
            #     name: Update production Lambda Functions
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/Files
            #         WatermarkDAG=Watermark.zip

        DBL:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project DBL
        - parallel:
            - step:
                name: Update sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project DBL
                    --bundle Masterfile/DBLReport.zip
                    --use-package
            - step:
                name: Update development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project DBL
                    --bundle Masterfile/DBLReport.zip
                    --use-package
            - step:
                name: Update test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project DBL
                    --bundle Masterfile/DBLReport.zip
                    --use-package
            - step:
                name: Update production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project DBL
                    --bundle Masterfile/DBLReport.zip
                    --use-package
        - parallel:
            - step:
                name: Update sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s OneView -p  Masterfile DBLReport=DBLReport.zip
            - step:
                name: Update development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p Masterfile DBLReport=DBLReport.zip
            - step:
                name: Update test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p Masterfile DBLReport=DBLReport.zip
            - step:
                name: Update production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p Masterfile DBLReport=DBLReport.zip

        HelloWorldJava-DAG:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project HelloWorldJava/DAG
        - step:
            name: Update Lambda Bundle
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - >-
                bash Deploy/Master/deploy-lambda-function
                --environment sbx
                --project HelloWorldJava/DAG
                --bundle HelloWorldJava/DAG.zip
                --use-package
        - step:
            name: Update Lambda Functions
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/update-functions -e sbx -s DataLake -p HelloWorldJava HelloWorldJavaDAG=DAG.zip

        HelloWorldJava-Task:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project HelloWorldJava/Task
        - step:
            name: Update ECR Bundle
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - >-
                bash Deploy/Master/deploy-lambda-function
                --environment sbx
                --project HelloWorldJava/Task
                --bundle HelloWorldJava/Task.zip
                --use-package

            # Create the Docker image
            - export VERSION=`cat Build/HelloWorldJava/Task/VERSION`
            - mv Bundle.zip Bundle.ZIP  # circumvent .dockerignore
            - docker build -t hello_world_java-sbx -f Build/HelloWorldJava/Task/Dockerfile ./

            # Push the Docker image to ECR
            - export VERSION=`cat Build/HelloWorldJava/Task/VERSION`
            - pipe: atlassian/aws-ecr-push-image:1.5.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_SANDBOX
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_SANDBOX
                AWS_DEFAULT_REGION: 'us-east-1'
                IMAGE_NAME: 'hello_world_java-sbx'
                TAGS: '$VERSION latest'
        - step:
            name: Update Lambda Function
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/update-functions -e sbx -s DataLake -p HelloWorldJava HelloWorldJavaTask=Task.zip

        IntelligentPlatform:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project IntelligentPlatform
        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project IntelligentPlatform
                    --bundle IntelligentPlatform/DAG.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project IntelligentPlatform
                    --bundle IntelligentPlatform/DAG.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project IntelligentPlatform
                    --bundle IntelligentPlatform/DAG.zip
                    --use-package
        - parallel:
            - step:
                name: Update Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s AIP -p IntelligentPlatform
                    DAG=DAG.zip
            # - step:
            #     name: Update Test Lambda Functions
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s AIP -p IntelligentPlatform
            #         DAG=DAG.zip
            # - step:
            #     name: Update Production Lambda Functions
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s AIP -p IntelligentPlatform
            #         DAG=DAG.zip

        IntelligentPlatform-Developer:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project IntelligentPlatform/Developer
        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project IntelligentPlatform/Developer
                    --bundle IntelligentPlatform/DeveloperDAG.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project IntelligentPlatform/Developer
                    --bundle IntelligentPlatform/DeveloperDAG.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project IntelligentPlatform/Developer
                    --bundle IntelligentPlatform/DeveloperDAG.zip
                    --use-package
        - parallel:
            - step:
                name: Update Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s AIP -p IntelligentPlatform
                    DeveloperDAG=DeveloperDAG.zip
            - step:
                name: Update Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s AIP -p IntelligentPlatform
                    DeveloperDAG=DeveloperDAG.zip
            # - step:
            #     name: Update Production Lambda Functions
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s AIP -p IntelligentPlatform
            #         DeveloperDAG=DeveloperDAG.zip

        IntelligentPlatform-Licensing:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project IntelligentPlatform/Licensing
        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project IntelligentPlatform/Licensing
                    --bundle IntelligentPlatform/LicensingDAG.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project IntelligentPlatform/Licensing
                    --bundle IntelligentPlatform/LicensingDAG.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project IntelligentPlatform/Licensing
                    --bundle IntelligentPlatform/LicensingDAG.zip
                    --use-package
        - parallel:
             - step:
                   name: Update Development Lambda Function
                   script:
                       - >-
                           bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                           -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                       - >-
                           bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s AIP
                           -p IntelligentPlatform LicensingDAG=LicensingDAG.zip
             - step:
                   name: Update Test Lambda Function
                   script:
                       - >-
                           bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                           -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                       - >-
                           bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s AIP
                           -p IntelligentPlatform LicensingDAG=LicensingDAG.zip
             # - step:
             #       name: Update Production Lambda Function
             #       script:
             #           - >-
             #               bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
             #               -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
             #           - >-
             #               bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s AIP
             #               -p IntelligentPlatform LicensingDAG=LicensingDAG.zip

        OneView-ETL:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project OneView/ETL
        - parallel:
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project OneView/ETL
                    --bundle OneView/ETL.zip
                    --use-package
            - step:
                name: Update Test Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project OneView/ETL
                    --bundle OneView/ETL.zip
                    --use-package
            - step:
                name: Update Production Lambda Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project OneView/ETL
                    --bundle OneView/ETL.zip
                    --use-package
        - parallel:
            - step:
                name: Update Development Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p OneView
                    ETL=ETL.zip
            - step:
                name: Update Test Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p OneView
                    ETL=ETL.zip
            - step:
                name: Update Production Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p OneView
                    ETL=ETL.zip

        OneView-ETL-Batch:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project OneView/ETL/Batch
        - parallel:
            - step:
                name: Update Development Batch Job Image
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -N ecr -I $AWS_ACCESS_KEY_ID_SHARED -S $AWS_SECRET_ACCESS_KEY_SHARED
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-container-image
                    --environment dev
                    --project OneView/ETL/Batch
                    --repo oneview-dev
            - step:
                name: Update Test Batch Job Image
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -N ecr -I $AWS_ACCESS_KEY_ID_SHARED -S $AWS_SECRET_ACCESS_KEY_SHARED
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-container-image
                    --environment tst
                    --project OneView/ETL/Batch
                    --repo oneview-tst
            - step:
                name: Update Production Batch Job Image
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -N ecr -I $AWS_ACCESS_KEY_ID_SHARED -S $AWS_SECRET_ACCESS_KEY_SHARED
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-container-image
                    --environment prd
                    --project OneView/ETL/Batch
                    --repo oneview-prd

        OneView-ETL-Extract:
        - step:
            name: Create Task Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project OneView/ETL/Extract
        - parallel:
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project OneView/ETL/Extract
                    --bundle OneView/Extract.zip
                    --jdbc-driver DB2
                    --jdbc-driver Informix
                    --use-package
            - step:
                name: Update Test Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project OneView/ETL/Extract
                    --bundle OneView/Extract.zip
                    --jdbc-driver DB2
                    --jdbc-driver Informix
                    --use-package
            - step:
                name: Update Production Lambda Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project OneView/ETL/Extract
                    --bundle OneView/Extract.zip
                    --jdbc-driver DB2
                    --jdbc-driver Informix
                    --use-package
        - parallel:
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p OneView
                    Extract=Extract.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p OneView
                    Extract=Extract.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p OneView
                    Extract=Extract.zip

        OneView-API:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project OneView/API
        - parallel:
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project OneView/API
                    --bundle OneView/API.zip
                    --use-package
            - step:
                name: Update Test Lambda Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project OneView/API
                    --bundle OneView/API.zip
                    --use-package
            - step:
                name: Update Production Lambda Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project OneView/API
                    --bundle OneView/API.zip
                    --use-package
        - parallel:
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p OneView
                    API=API.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p OneView
                    API=API.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p OneView
                    API=API.zip

        CPT-Files-Build:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project CPT/Files/Build
        - parallel:
            - step:
                name: Update Sandbox Lambda Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/Files/Build
                    --bundle CPT/Files/Build.zip
                    --use-package
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/Files/Build
                    --bundle CPT/Files/Build.zip
                    --use-package
#            - step:
#                name: Update Test Lambda Bundle
#                caches:
#                    - environment-test
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment tst
#                    --project CPT/Files/Build
#                    --bundle CPT/Files/Build.zip
#                    --jdbc-driver DB2
#                    --jdbc-driver Informix
#                    --use-package
#            - step:
#                name: Update Production Lambda Bundle
#                caches:
#                    - environment-prod
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
#                    --environment prd
#                    --project CPT/Files/Build
#                    --bundle CPT/Files/Build.zip
#                    --jdbc-driver DB2
#                    --jdbc-driver Informix
#                    --use-package
#        - parallel:
#            - step:
#                name: Update Sandbox Lambda Function
#                script:
#                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                - bash Deploy/Master/update-functions -e sbx s CPT -p CPT/Files BuildDAG=Build.zip
#            - step:
#                name: Update Development Lambda Function
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT -p CPT/Files
#                    BuildDAG=Build.zip
#            - step:
#                name: Update Test Lambda Function
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT -p CPT/Files
#                    BuildDAG=Build.zip
#            - step:
#                name: Update Production Lambda Function
#                script:
#                - >-
#                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                - >-
#                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT -p CPT/Files
#                    BuildDAG=Build.zip

        Scheduler:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-package --project Scheduler
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project Scheduler
                    --bundle Scheduler.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project Scheduler
                    --bundle Scheduler.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project Scheduler
                    --bundle Scheduler.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project Scheduler
                    --bundle Scheduler.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project Scheduler
                    --bundle Scheduler.zip
                    --use-package
        - parallel:
            - step:
                name: Reload Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/update-functions -e sbx -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
            - step:
                name: Reload Staging Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip


definitions:
  caches:
    build-dependencies: Environment
    test-dependencies: Environment

    environment-master: Environment
    environment-dev: Environment
    environment-test: Environment
    environment-stage: Environment
    environment-prod: Environment
