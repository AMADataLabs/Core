image:
  name: 644454719059.dkr.ecr.us-east-1.amazonaws.com/datalabs-bitbucket-pipelines:1.5.1
  aws:
    access-key: $AWS_ACCESS_KEY_ID_SANDBOX
    secret-key: $AWS_SECRET_ACCESS_KEY_SANDBOX

options:
  docker: true

pipelines:
    branches:
        master:
        - step:
            name: Build
            caches:
                - build-dependencies
            script:
            - bash Script/bitbucket-pipelines-build.sh
    tags:
        'datalabs-*_*.*.*':
        - step:
            name: Build Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - source Deploy/Master/release-info.sh $BITBUCKET_TAG
            - >-
                bash Deploy/Master/deploy-package --project ${PROJECT} --version ${RELEASE_VERSION}
    custom:
        ##############################################################
        # global targets
        ##############################################################

        Test:
        - step:
            name: Unit and Lint Tests
            caches:
                - test-dependencies
            script:
                - bash Script/bitbucket-pipelines-test.sh


        ##############################################################
        # master branch targets
        ##############################################################

        AMC:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project AMC
        - step:
            name: Update ETL Bundle
            caches:
                - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - >-
                bash Deploy/Master/deploy-lambda-function
                --environment sbx
                --project AMC
                --bundle Masterfile/AMC.zip
                --jdbc-driver Informix
                --use-package
        - parallel:
            - step:
                name: Update sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project AMC
                    --bundle Masterfile/AMC.zip
                    --jdbc-driver Informix
                    --use-package
            - step:
                name: Update development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project AMC
                    --bundle Masterfile/AMC.zip
                    --jdbc-driver Informix
                    --use-package
            - step:
                name: Update test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project AMC
                    --bundle Masterfile/AMC.zip
                    --jdbc-driver Informix
                    --use-package
            - step:
                name: Update production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project AMC
                    --bundle Masterfile/AMC.zip
                    --jdbc-driver Informix
                    --use-package
        # - step:
        #     name: Update Lambda Functions
        #     script:
        #     - export ENABLE_FEATURE_DEV=True
        #     - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_SANDBOX
        #     - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_SANDBOX
        #     - export AWS_DEFAULT_REGION='us-east-1'
        #     - export ENVIRONMENT=sbx
        #     - bash Deploy/Master/update-functions -e sbx -s OneView -p Masterfile AMC=AMC.zip

        HelloWorld:
        - step:
            name: Update Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project HelloWorld

        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project HelloWorld
                    --bundle HelloWorld.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project HelloWorld
                    --bundle Masterfile/HelloWorld.zip
                    --use-package

        - parallel:
            - step:
                name: Update Sandbox Lambda Function
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s DataLake HelloWorld=HelloWorld.zip
            - step:
                name: Update Development Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
                    HelloWorld=HelloWorld.zip
            - step:
                name: Update Test Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
                    HelloWorld=HelloWorld.zip
            - step:
                name: Update Staging Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s DataLake
                    HelloWorld=HelloWorld.zip
            # - step:
            #     name: Update Production Lambda Function
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
            #         HelloWorld=HelloWorld.zip

        Cerner:
        - step:
            name: Update Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project Cerner

        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project Cerner
                    --bundle CustomerIntelligence/Cerner.zip
                    --use-package

        - parallel:
            - step:
                name: Update Sandbox Lambda Function
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s DataLake -p CustomerIntelligence Cerner=Cerner.zip
            - step:
                name: Update Development Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
                    -p CustomerIntelligence Cerner=Cerner.zip
        #     - step:
        #         name: Update Test Lambda Function
        #         script:
        #         - >-
        #             bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
        #             -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
        #         - >-
        #             bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
        #             -p CustomerIntelligence Cerner=Cerner.zip
        #     - step:
        #         name: Update Staging Lambda Function
        #         script:
        #         - >-
        #             bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
        #             -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
        #         - >-
        #             bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s DataLake
        #             -p CustomerIntelligence Cerner=Cerner.zip
        #     - step:
        #         name: Update Production Lambda Function
        #         script:
        #         - >-
        #             bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
        #             -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
        #         - >-
        #             bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
        #             -p CustomerIntelligence Cerner=Cerner.zip

        ContactID:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project ContactID
        - parallel:
            - step:
                name: Update sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
                    --use-package
            - step:
                name: Update development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
                    --use-package
            - step:
                name: Update test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
                    --use-package
            - step:
                name: Update staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
                    --use-package
            - step:
                name: Update production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project ContactID
                    --bundle CustomerIntelligence/ContactID.zip
                    --use-package
        - step:
            name: Update sandbox Lambda Functions
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/update-functions -e sbx -s DataLake -p CustomerIntelligence ContactID=ContactID.zip

   #         - step:
   #             name: Update development Lambda Functions
   #             script:
   #             - >-
   #                 bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
   #                 -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
   #             - >-
   #                 bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
   #                 -p CustomerIntelligence ContactID=ContactID.zip
   #         - step:
   #             name: Update test Lambda Functions
   #             script:
   #             - >-
   #                 bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
   #                 -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
   #             - >-
   #                 bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
   #                 -p CustomerIntelligence ContactID=ContactID.zip
   #         - step:
   #             name: Update production Lambda Functions
   #             script:
   #             - >-
   #                 bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
   #                 -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
   #             - >-
   #                 bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
   #                 -p CustomerIntelligence ContactID=ContactID.zip

        CPT-API-ETL:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project CPT/API/ETL
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/API/ETL
                    --bundle CPT/API/ETL.zip
                    --use-package

        - parallel:
            - step:
                name: Update Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/API ETL=ETL.zip
            - step:
                name: Update Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/API
                    ETL=ETL.zip
            - step:
                name: Update Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/API
                    ETL=ETL.zip
            - step:
                name: Update Staging Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s CPT-API -p CPT/API
                    ETL=ETL.zip
            - step:
                name: Update Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/API
                    ETL=ETL.zip

        Developer-Users:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project IntelligentPlatform/Developer/Users
        - parallel:
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project IntelligentPlatform/Developer/Users
                    --bundle IntelligentPlatform/DeveloperUsersETL.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project IntelligentPlatform/Developer/Users
                    --bundle IntelligentPlatform/DeveloperUsersETL.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project IntelligentPlatform/Developer/Users
                    --bundle IntelligentPlatform/DeveloperUsersETL.zip
                    --use-package
        - parallel:
            - step:
                name: Update Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s AIP -p IntelligentPlatform
                    DeveloperUsersETL=DeveloperUsersETL.zip
            # - step:
            #     name: Update Test Lambda Functions
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s AIP -p IntelligentPlatform
            #         DeveloperUsersETL=DeveloperUsersETL.zip
            # - step:
            #     name: Update Production Lambda Functions
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s AIP -p IntelligentPlatform
            #         DeveloperUsersETL=DeveloperUsersETL.zip

        CPT-API-Endpoint:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project CPT/API/Endpoint
        - parallel:
            - step:
                name: Update sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/API/Endpoint
                    --bundle CPT/API/Endpoint.zip
                    --use-package
        - parallel:
            - step:
                name: Update Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/API
                    Authorizer=Endpoint.zip
                    Endpoint=Endpoint.zip
                    BulkAuthorizer=Endpoint.zip
                    BulkEndpoint=Endpoint.zip
            - step:
                name: Update Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/API
                    Authorizer=Endpoint.zip
                    Endpoint=Endpoint.zip
                    BulkAuthorizer=Endpoint.zip
                    BulkEndpoint=Endpoint.zip
            - step:
                name: Update Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i
                    Deploy/Master/update-functions -e tst -s CPT-API -p CPT/API
                    Authorizer=Endpoint.zip
                    Endpoint=Endpoint.zip
                    BulkAuthorizer=Endpoint.zip
                    BulkEndpoint=Endpoint.zip
            - step:
                name: Update Staging Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i
                    Deploy/Master/update-functions -e itg -s CPT-API -p CPT/API
                    Authorizer=Endpoint.zip
                    Endpoint=Endpoint.zip
                    BulkAuthorizer=Endpoint.zip
                    BulkEndpoint=Endpoint.zip
            - step:
                name: Update Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/API
                    Authorizer=Endpoint.zip
                    Endpoint=Endpoint.zip
                    BulkAuthorizer=Endpoint.zip
                    BulkEndpoint=Endpoint.zip

        CPT-Files-Ingest:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project CPT/Files/Ingest
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
                    --use-package
            - step:
                name: Update test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/Files/Ingest
                    --bundle CPT/Files/Ingest.zip
                    --use-package
        - parallel:
            - step:
                name: Update Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/Files IngestionDAG=Ingest.zip
            - step:
                name: Update Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/Files
                    IngestionDAG=Ingest.zip
        #     - step:
        #         name: Update Test Lambda Functions
        #         script:
        #         - >-
        #             bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
        #             -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
        #         - >-
        #             bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/Files
        #             IngestionDAG=Ingest.zip
        #     - step:
        #         name: Update Production Lambda Functions
        #         script:
        #         - >-
        #             bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
        #             -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
        #         - >-
        #             bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/Files
        #             IngestionDAG=Ingest.zip
        #     - step:
        #         name: Update Production Lambda Functions
        #         script:
        #         - >-
        #             bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
        #             -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
        #         - >-
        #             bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/Files
        #             IngestionDAG=Ingest.zip

        CPT-Files-Watermark:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project CPT/Files/Watermark
        - parallel:
            - step:
                name: Update sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
                    --use-package
            - step:
                name: Update development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
                    --use-package
            - step:
                name: Update test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
                    --use-package
            - step:
                name: Update staging Bundle
                caches:
                    - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e itg -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
                    --use-package
            - step:
                name: Update production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project CPT/Files/Watermark
                    --bundle CPT/Files/Watermark.zip
                    --use-package
        - parallel:
            - step:
                name: Update sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s CPT-API -p CPT/Files WatermarkDAG=Watermark.zip
            - step:
                name: Update development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s CPT-API -p CPT/Files
                    WatermarkDAG=Watermark.zip
            # - step:
            #     name: Update test Lambda Functions
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s CPT-API -p CPT/Files
            #         WatermarkDAG=Watermark.zip
            # - step:
            #     name: Update production Lambda Functions
            #     script:
            #     - >-
            #         bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            #         -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
            #     - >-
            #         bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s CPT-API -p CPT/Files
            #         WatermarkDAG=Watermark.zip

        DBL:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project DBL
        - parallel:
            - step:
                name: Update sandbox Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project DBL
                    --bundle Masterfile/DBLReport.zip
                    --use-package
            - step:
                name: Update development Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project DBL
                    --bundle Masterfile/DBLReport.zip
                    --use-package
            - step:
                name: Update test Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project DBL
                    --bundle Masterfile/DBLReport.zip
                    --use-package
            - step:
                name: Update production Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project DBL
                    --bundle Masterfile/DBLReport.zip
                    --use-package
        - parallel:
            - step:
                name: Update sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s OneView -p  Masterfile DBLReport=DBLReport.zip
            - step:
                name: Update development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p Masterfile DBLReport=DBLReport.zip
            - step:
                name: Update test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p Masterfile DBLReport=DBLReport.zip
            - step:
                name: Update production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p Masterfile DBLReport=DBLReport.zip

        HelloWorldJava:
        - parallel:
            - step:
                name: Create DAG Development Component Package
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/deploy-python-package --project HelloWorldJava/DAG
            - step:
                name: Create Task Development Component Package
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/deploy-java-package --project HelloWorldJava/Task
        - parallel:
            - step:
                name: Update DAG Bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project HelloWorldJava/DAG
                    --bundle HelloWorldJava/DAG.zip
                    --use-package
            - step:
                name: Update Task Bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project HelloWorldJava/Task
                    --bundle HelloWorldJava/Task.zip
                    --use-package

                # Create the Docker image
                - export VERSION=`cat Build/HelloWorldJava/Task/VERSION`
                - docker build -t hello_world_java-sbx -f Build/HelloWorldJava/Task/Dockerfile ./

                # Push the Docker image to ECR
                - export VERSION=`cat Build/HelloWorldJava/Task/VERSION`
                - pipe: atlassian/aws-ecr-push-image:1.5.0
                  variables:
                    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_SANDBOX
                    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_SANDBOX
                    AWS_DEFAULT_REGION: 'us-east-1'
                    IMAGE_NAME: 'hello_world_java-sbx'
                    TAGS: '$VERSION latest'
        - step:
            name: Update Lambda Functions
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - >-
                bash Deploy/Master/update-functions -e sbx -s DataLake -p HelloWorldJava
                HelloWorldJavaDAG=DAG.zip
                HelloWorldJavaTask=Task.jar

        OneView-ETL:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project OneView/ETL
        - parallel:
            - step:
                name: Update Sandbox Lambda Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project OneView/ETL
                    --bundle OneView/ETL.zip
                    --use-package
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project OneView/ETL
                    --bundle OneView/ETL.zip
                    --use-package
            - step:
                name: Update Test Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project OneView/ETL
                    --bundle OneView/ETL.zip
                    --jdbc-driver DB2
                    --jdbc-driver Informix
                    --use-package
            - step:
                name: Update Production Lambda Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project OneView/ETL
                    --bundle OneView/ETL.zip
                    --jdbc-driver DB2
                    --jdbc-driver Informix
                    --use-package
        - parallel:
            - step:
                name: Update Sandbox Lambda Function
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s OneView -p OneView ETL=ETL.zip
            - step:
                name: Update Development Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p OneView
                    ETL=ETL.zip
            - step:
                name: Update Test Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p OneView
                    ETL=ETL.zip
            - step:
                name: Update Production Lambda Function
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p OneView
                    ETL=ETL.zip

        OneView-ETL-Batch:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project OneView/ETL/Batch
        - parallel:
            - step:
                name: Update Development Batch Job Image
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -N ecr -I $AWS_ACCESS_KEY_ID_SHARED -S $AWS_SECRET_ACCESS_KEY_SHARED
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-container-image
                    --environment dev
                    --project OneView/ETL/Batch
                    --repo oneview-dev
            - step:
                name: Update Test Batch Job Image
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -N ecr -I $AWS_ACCESS_KEY_ID_SHARED -S $AWS_SECRET_ACCESS_KEY_SHARED
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-container-image
                    --environment tst
                    --project OneView/ETL/Batch
                    --repo oneview-tst
            - step:
                name: Update Production Batch Job Image
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -N ecr -I $AWS_ACCESS_KEY_ID_SHARED -S $AWS_SECRET_ACCESS_KEY_SHARED
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-container-image
                    --environment prd
                    --project OneView/ETL/Batch
                    --repo oneview-prd

        OneView-API:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project OneView/API
        - parallel:
            - step:
                name: Update Sandbox Lambda Bundle
                caches:
                    - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project OneView/API
                    --bundle OneView/API.zip
                    --use-package
            - step:
                name: Update Development Lambda Bundle
                caches:
                    - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project OneView/API
                    --bundle OneView/API.zip
                    --use-package
            - step:
                name: Update Test Lambda Bundle
                caches:
                    - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project OneView/API
                    --bundle OneView/API.zip
                    --use-package
            - step:
                name: Update Production Lambda Bundle
                caches:
                    - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project OneView/API
                    --bundle OneView/API.zip
                    --use-package
        - parallel:
            - step:
                name: Reload Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - bash Deploy/Master/update-functions -e sbx -s OneView -p OneView API=API.zip
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s OneView -p OneView
                    API=API.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s OneView -p OneView
                    API=API.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s OneView -p OneView
                    API=API.zip

        Licensing:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project IntelligentPlatform/Licensing
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project IntelligentPlatform/Licensing
                    --bundle IntelligentPlatform/Licensing.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project IntelligentPlatform/Licensing
                    --bundle IntelligentPlatform/Licensing.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project IntelligentPlatform/Licensing
                    --bundle IntelligentPlatform/Licensing.zip
                    --use-package
#        - parallel:
#              - step:
#                    name: Update Sandbox Lambda Function
#                    script:
#                        - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                        - bash Deploy/Master/update-functions -e sbx -s PlatformExperience -p IntelligentPlatform/Licensing ETL=LicensingETL.zip
#              - step:
#                    name: Update Development Lambda Function
#                    script:
#                        - >-
#                            bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                            -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                        - >-
#                            bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s PlatformExperience
#                            -p IntelligentPlatform/Licensing ETL=LicensingETL.zip
#              - step:
#                    name: Update Test Lambda Function
#                    script:
#                        - >-
#                            bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                            -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                        - >-
#                            bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s PlatformExperience
#                            -p IntelligentPlatform/Licensing ETL=LicensingETL.zip
#              - step:
#                    name: Update Production Lambda Function
#                    script:
#                        - >-
#                            bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
#                            -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
#                        - >-
#                            bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s PlatformExperience
#                            -p IntelligentPlatform/Licensing ETL=LicensingETL.zip

        Scheduler:
        - step:
            name: Create Development Component Package
            caches:
            - environment-master
            script:
            - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
            - bash Deploy/Master/deploy-python-package --project Scheduler
        - parallel:
            - step:
                name: Update Sandbox Bundle
                caches:
                - environment-master
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/deploy-lambda-function
                    --environment sbx
                    --project Scheduler
                    --bundle Scheduler.zip
                    --use-package
            - step:
                name: Update Development Bundle
                caches:
                - environment-dev
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment dev
                    --project Scheduler
                    --bundle Scheduler.zip
                    --use-package
            - step:
                name: Update Test Bundle
                caches:
                - environment-test
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment tst
                    --project Scheduler
                    --bundle Scheduler.zip
                    --use-package
            - step:
                name: Update Staging Bundle
                caches:
                - environment-stage
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment itg
                    --project Scheduler
                    --bundle Scheduler.zip
                    --use-package
            - step:
                name: Update Production Bundle
                caches:
                - environment-prod
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/deploy-lambda-function
                    --environment prd
                    --project Scheduler
                    --bundle Scheduler.zip
                    --use-package
        - parallel:
            - step:
                name: Reload Sandbox Lambda Functions
                script:
                - bash Deploy/Master/setup-aws-cli -e sbx -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                - >-
                    bash Deploy/Master/update-functions -e sbx -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
            - step:
                name: Reload Development Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e dev -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e dev -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
            - step:
                name: Reload Test Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e tst -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e tst -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
            - step:
                name: Reload Staging Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e itg -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip
            - step:
                name: Reload Production Lambda Functions
                script:
                - >-
                    bash Deploy/Master/setup-aws-cli -e prd -i $AWS_ACCESS_KEY_ID_SANDBOX -s $AWS_SECRET_ACCESS_KEY_SANDBOX
                    -I $AWS_ACCESS_KEY_ID_APIGW -S $AWS_SECRET_ACCESS_KEY_APIGW
                - >-
                    bash --rcfile assume_role.rc -i Deploy/Master/update-functions -e prd -s DataLake
                    Scheduler=Scheduler.zip
                    DAGProcessor=Scheduler.zip
                    TaskProcessor=Scheduler.zip


definitions:
  caches:
    build-dependencies: Environment
    test-dependencies: Environment

    environment-master: Environment
    environment-dev: Environment
    environment-test: Environment
    environment-stage: Environment
    environment-prod: Environment
