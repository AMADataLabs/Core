#!/bin/bash

set -eu

SCRIPT_PATH=`realpath $0`
SCRIPT_BASE_PATH=`dirname $SCRIPT_PATH`
RUN="${SCRIPT_BASE_PATH}/run.py python"

AWS_DEFAULT_REGION=us-east-1

ENVIRONMENT=
PROJECT=
BUNDLE=


main() {
    process_arguments "$@"

    setup_virtual_environment

    build_package

    upload_package
}


process_arguments() {
    while (( "$#" )); do
      case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -e|--environment)
            ENVIRONMENT=$2
            shift
            shift
            ;;
        -p|--project)
            PROJECT=$2
            shift
            shift
            ;;
        *)
            echo "Unexpected argument $1"
            print_usage
            exit 0
            ;;
      esac
    done

    if [[ "$ENVIRONMENT" == "" ]]; then
        echo "Missing environment argument."
        exit 1
    elif  [[ "$PROJECT" == "" ]]; then
        echo "Missing project argument."
        exit 1
    fi
}


setup_virtual_environment() {
    ${PWD}/Script/setup-virtual-environment Master/BitBucketPipelines
    export VIRTUAL_ENV=${PWD}/Environment/Master/BitBucketPipelines
    export PATH="${VIRTUAL_ENV}/bin:$PATH"
}


build_package() {
    source Build/Scheduler/.ci/release.sh ${ENVIRONMENT}

    Script/release-python-component --name $RELEASE_NAME --version $RELEASE_VERSION \
        --description "$RELEASE_DESCRIPTION" ${PROJECT}

    aws codeartifact login --tool twine --domain datalabs --repository datalabs-sbx

    twine upload --repository codeartifact dist/*.whl
}


upload_package() {
    if [[ "$RUNTIME" == "Python" ]]; then
        aws s3 cp Bundle.zip s3://ama-${ENVIRONMENT}-datalake-lambda-us-east-1/${BUNDLE}
    elif [[ "$RUNTIME" == "Java" ]]; then
        rm Bundle/target/original-*.jar

        aws s3 cp Bundle/target/*.jar s3://ama-${ENVIRONMENT}-datalake-lambda-us-east-1/${PROJECT}.jar
    fi
}


print_usage() {
    echo "Usage: deploy-lambda-function [OPTIONS]..."
    echo "Bundle and upload a code bundle for a Lambda function."
    echo
    echo "OPTIONS"
    echo "  -h, --help                            print this usage text"
    echo "  -e, --environment                     deployment environment (dev, tst, itg, prd)"
    echo "  -p, --project                         project path relative to Build/"
}


install_db2_driver() {
    aws s3 cp s3://${DRIVER_BUCKET}/JDBC/Db2JdbcDriver.zip Db2JdbcDriver.zip
    unzip ./Db2JdbcDriver.zip
    echo "db2.jcc.charsetDecoderEncoder=3" >> ./DB2JccConfiguration.properties

    EXTRA_FILES="${EXTRA_FILES} db2jcc4.jar DB2JccConfiguration.properties"
}


install_informix_driver() {
    aws s3 cp s3://${DRIVER_BUCKET}/JDBC/InformixJdbcDriver.zip InformixJdbcDriver.zip
    unzip ./InformixJdbcDriver.zip

    EXTRA_FILES="${EXTRA_FILES} jdbc-4.50.4.1.jar bson-4.2.0.jar"
}


install_sqlserver_driver() {
    aws s3 cp s3://${DRIVER_BUCKET}/JDBC/SqlServerJdbcDriver.zip SqlServerJdbcDriver.zip
    unzip ./SqlServerJdbcDriver.zip
    mv sqljdbc_10.2\\enu/mssql-jdbc-10.2.0.jre8.jar mssql-jdbc-10.2.0.jre8.jar

    EXTRA_FILES="${EXTRA_FILES} mssql-jdbc-10.2.0.jre8.jar"
}


main "$@"
