#!/usr/bin/env bash

set -eux

SCRIPT_PATH=`realpath $0`
SCRIPT_BASE_PATH=`dirname $SCRIPT_PATH`
RUN="${SCRIPT_BASE_PATH}/run.py python"

AWS_DEFAULT_REGION=us-east-1
declare -A ENVIRONMENTS=(
    [master]=sbx
    [dev]=dev
    [test]=tst
    [stage]=itg
    [prod]=prd
)

BRANCH=
ENVIRONMENT=
PROJECT=
VERSION=


main() {
    process_arguments "$@"

    setup_virtual_environment

    build_package

    upload_package
}


process_arguments() {
    while (( "$#" )); do
      case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -b|--branch)
            BRANCH=$2
            shift
            shift
            ;;
        -e|--environment)
            ENVIRONMENT=$2
            shift
            shift
            ;;
        -p|--project)
            PROJECT=$2
            shift
            shift
            ;;
        -v|--version)
            VERSION=$2
            shift
            shift
            ;;
        *)
            echo "Unexpected argument $1"
            print_usage
            exit 0
            ;;
      esac
    done

    if [[ "$VERSION" != "" ]]; then
        ENVIRONMENT=sbx
    elif [[ "$BRANCH" != "" ]]; then
        ENVIRONMENT=${ENVIRONMENTS[$BRANCH]}
    elif [[ "$ENVIRONMENT" == "" ]]; then
        echo "Missing environment argument."
        exit 1
    elif  [[ "$PROJECT" == "" ]]; then
        echo "Missing project argument."
        exit 1
    fi
}


setup_virtual_environment() {
    ${PWD}/Script/setup-virtual-environment Master/BitBucketPipelines
    export VIRTUAL_ENV=${PWD}/Environment/Master/BitBucketPipelines
    export PATH="${VIRTUAL_ENV}/bin:$PATH"
}


build_package() {
    source Build/${PROJECT}/.ci/release.sh ${ENVIRONMENT}

    if [[ "$VERSION" != "" ]]; then
        RELEASE_VERSION=$VERSION
    else
        VERSION=$RELEASE_VERSION
    fi

    if [[ "$RELEASE_VERSION" == "dev" ]]; then
        generate_dev_version
    fi
    echo "Version: $VERSION"

    Script/release-python-component --name $RELEASE_NAME --version $VERSION \
        --description "$RELEASE_DESCRIPTION" ${PROJECT}
}


upload_package() {
    aws codeartifact login --tool twine --domain datalabs --repository datalabs-sbx

    twine upload --repository codeartifact Release/dist/*.whl
}


print_usage() {
    echo "Usage: deploy-python-package [OPTIONS]..."
    echo "Build and upload a Python package for a component."
    echo
    echo "OPTIONS"
    echo "  -h, --help                            print this usage text"
    echo "  -e, --environment                     deployment environment (dev, tst, itg, prd)"
    echo "  -p, --project                         project path relative to Build/"
}


generate_dev_version() {
    current_version=$(
        aws codeartifact list-package-versions \
            --domain datalabs --repository datalabs-sbx --package $RELEASE_NAME \
            --format pypi --sort-by PUBLISHED_TIME \
            | grep -m 1 -e '"version": ' | sed 's/..*: "//' | sed 's/",//'
    )

    if [[ "$current_version" == "" ]]; then
        current_version="0.1.0"
    fi

    base_version=$(echo $current_version | sed 's/\.dev.*//')
    dev_version=$(echo $current_version | sed 's/..*dev//')

    if [[ "$dev_version" == "$current_version" ]]; then
        VERSION="${current_version}.dev0"
    else
        VERSION="${base_version}.dev$(expr $dev_version + 1)"
    fi
}


main "$@"
