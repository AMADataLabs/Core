#!/usr/bin/env bash

set -eux

SCRIPT_PATH=`realpath $0`
SCRIPT_BASE_PATH=`dirname $SCRIPT_PATH`
RUN="${SCRIPT_BASE_PATH}/run.py python"

AWS_DEFAULT_REGION=us-east-1
ENVIRONMENT=sbx

BRANCH=
PROJECT=
VERSION=


main() {
    process_arguments "$@"

    create_server_config

    determine_package_info

    build_package

    upload_package
}


process_arguments() {
    while (( "$#" )); do
      case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -p|--project)
            PROJECT=$2
            shift
            shift
            ;;
        -v|--version)
            VERSION=$2
            shift
            shift
            ;;
        *)
            echo "Unexpected argument $1"
            print_usage
            exit 0
            ;;
      esac
    done

    if  [[ "$PROJECT" == "" ]]; then
        echo "Missing project argument."
        exit 1
    fi
}


create_server_config() {
    if [ -e ~/.m2/settings.xml ]; then
        echo "The file ~/.m2/settings.xml already exists. Aborting..."

        exit 1
    fi
    export CODEARTIFACT_AUTH_TOKEN=$(
        aws --profile default codeartifact get-authorization-token --domain datalabs\
        --query authorizationToken --output text
    )

    mkdir -p ~/.m2

    cat > ~/.m2/settings.xml <<EOF
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
    <servers>
        <server>
            <id>codeartifact</id>
            <username>aws</username>
            <password>\${env.CODEARTIFACT_AUTH_TOKEN}</password>
        </server>
    </servers>
</settings>
EOF
}


determine_package_info() {
    source Build/${PROJECT}/.ci/release.sh ${ENVIRONMENT}
    PACKAGE=${RELEASE_NAME#datalabs-}

    unset RELEASE_VERSION

    if [[ "$VERSION" == "" ]]; then
        generate_dev_version
    fi
    echo "Version: $VERSION"
}


build_package() {
    Script/bundle-java-project --in-place --directory Release/ --version $VERSION --package $PACKAGE $PROJECT
}


upload_package() {
    cd Release

    mvn deploy
}


print_usage() {
    echo "Usage: deploy-java-package [OPTIONS]..."
    echo "Build and upload a Python package for a component."
    echo
    echo "OPTIONS"
    echo "  -h, --help                            print this usage text"
    echo "  -e, --environment                     deployment environment (dev, tst, itg, prd)"
    echo "  -p, --project                         project path relative to Build/"
    echo "  -v, --version                         override the version of the package to build"
}


generate_dev_version() {
    aws --profile default codeartifact list-package-versions \
        --domain datalabs --repository datalabs-sbx --namespace org.ama-assn.datalabs --package $PACKAGE \
        --format maven --sort-by PUBLISHED_TIME

    local current_version=$(
        aws --profile default codeartifact list-package-versions \
            --domain datalabs --repository datalabs-sbx --namespace org.ama-assn.datalabs --package $PACKAGE \
            --format maven --sort-by PUBLISHED_TIME | jq -r '.versions[0].version'
    )

    if [[ "$current_version" == "" ]]; then
        current_version="0.1.0"
    fi

    base_version=$(echo $current_version | sed 's/\.dev.*//')
    dev_version=$(echo $current_version | sed 's/..*dev//')

    if [[ "$dev_version" == "$current_version" ]]; then
        VERSION="${current_version}.dev0"
    else
        VERSION="${base_version}.dev$(expr $dev_version + 1)"
    fi
}


main "$@"
