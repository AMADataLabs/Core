#!/usr/bin/env bash

set -x

SCRIPT_PATH=`realpath $0`
SCRIPT_BASE_PATH=`dirname $SCRIPT_PATH`
RUN="${SCRIPT_BASE_PATH}/run.py python"

AWS_DEFAULT_REGION=us-east-1

ENVIRONMENT=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_ACCESS_KEY_ID_ROLE=
AWS_SECRET_ACCESS_KEY_ROLE=
ROLE_NAME=apigw


main() {
    process_arguments "$@"

    configure_default_profile

    if [[ "$AWS_ACCESS_KEY_ID_ROLE" != "" ]]; then
        configure_assume_role_profile

        assume_role
    fi
}


process_arguments() {
    while (( "$#" )); do
      case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -e|--environment)
            ENVIRONMENT=$2
            shift
            shift
            ;;
        -i|--access-id)
            AWS_ACCESS_KEY_ID=$2
            shift
            shift
            ;;
        -s|--access-secret)
            AWS_SECRET_ACCESS_KEY=$2
            shift
            shift
            ;;
        -N|--role-name)
            ROLE_NAME=$2
            shift
            shift
            ;;
        -I|--role-id)
            AWS_ACCESS_KEY_ID_ROLE=$2
            shift
            shift
            ;;
        -S|--role-secret)
            AWS_SECRET_ACCESS_KEY_ROLE=$2
            shift
            shift
            ;;
        *)
            echo "Unexpected argument $1"
            print_usage
            exit 0
            ;;
      esac
    done

    if [[ "$ENVIRONMENT" == "" ]]; then
        echo "Missing environment argument."
        exit 1
    elif  [[ "$AWS_ACCESS_KEY_ID" == "" ]]; then
        echo "Missing access key ID argument."
        exit 1
    elif  [[ "$AWS_SECRET_ACCESS_KEY" == "" ]]; then
        echo "Missing secret access key argument."
        exit 1
    elif [[ "$ENVIRONMENT" == "itg" ]]; then
        ENVIRONMENT=prd
    fi
}


print_usage() {
    echo "Usage: setup-assume-role [OPTIONS]..."
    echo "Configure the AWS CLI with assume role credentials."
    echo
    echo "OPTIONS"
    echo "  -h, --help                            print this usage text"
    echo "  -e, --environment                     deployment environment (dev, tst, itg, prd)"
    echo "  -i, --access-id                       AWS access key id"
    echo "  -s, --access-secret                   AWS secret access key"
    echo "  -I, --role-id                         AWS assume role access key id"
    echo "  -S, --role-secret                     AWS assume role secret access key"
}


configure_default_profile() {
    aws configure set profile.default.aws_access_key_id $AWS_ACCESS_KEY_ID
    aws configure set profile.default.aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    aws configure set profile.default.region $AWS_DEFAULT_REGION
    aws configure set profile.default.output json
}


configure_assume_role_profile() {
    profile=apigw
    if [[ "$ROLE_NAME" == "ecr" or "$ROLE_NAME" == "ecs" ]]; then
        profile=shared
    fi

    aws configure set profile.${profile}.aws_access_key_id $AWS_ACCESS_KEY_ID_ROLE
    aws configure set profile.${profile}.aws_secret_access_key $AWS_SECRET_ACCESS_KEY_ROLE
    aws configure set profile.${profile}.region $AWS_DEFAULT_REGION
    aws configure set profile.${profile}.output json
}


assume_role() {
    ${PWD}/Script/${ROLE_NAME}_assume_role.sh ${ENVIRONMENT} | grep source > assume_role.rc
}


main "$@"
