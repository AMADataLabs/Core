#!/usr/bin/env bash

set -eux

SCRIPT_PATH=`realpath $0`
SCRIPT_BASE_PATH=`dirname $SCRIPT_PATH`
RUN="${SCRIPT_BASE_PATH}/run.py python"

AWS_DEFAULT_REGION=us-east-1
DRIVER_BUCKET=ama-sbx-datalake-lambda-us-east-1
INSTALL_DB2_DRIVER=False
INSTALL_INFORMIX_DRIVER=False
INSTALL_SQLSERVER_DRIVER=False
USE_PACKAGE=False

ENVIRONMENT=
PROJECT=
BUNDLE=
RUNTIME=
EXTRA_FILES=
PACKAGE=
METADATA=
DEPLOYED_VERSION=


main() {
    process_arguments "$@"

    if [[ "$USE_PACKAGE" == "True" ]]; then
        get_deployed_version

        if [[ "$RUNTIME" == "Python" ]]; then
            determine_python_package
        fi
    fi

    if [[ "$USE_PACKAGE" == "False" || "$DEPLOYED_VERSION" != "$RELEASE_VERSION" ]]; then
        setup_virtual_environment

        install_jdbc_drivers

        create_code_bundle

        upload_code_bundle
    fi
}


process_arguments() {
    while (( "$#" )); do
      case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -e|--environment)
            ENVIRONMENT=$2
            shift
            shift
            ;;
        -p|--project)
            PROJECT=$2
            shift
            shift
            ;;
        -b|--bundle)
            BUNDLE=$2
            shift
            shift
            ;;
        -r|--runtime)
            RUNTIME=$2
            shift
            shift
            ;;
        -j|--jdbc-driver)
            if [[ "$2" == "DB2" ]]; then
                INSTALL_DB2_DRIVER=True
            elif [[ "$2" == "Informix" ]]; then
                INSTALL_INFORMIX_DRIVER=True
            elif [[ "$2" == "SQLServer" ]]; then
                INSTALL_SQLSERVER_DRIVER=True
            fi
            shift
            shift
            ;;
        -P|--use-package)
            USE_PACKAGE=True
            shift
            ;;
        *)
            echo "Unexpected argument $1"
            print_usage
            exit 0
            ;;
      esac
    done
}


get_deployed_version() {
    DEPLOYED_VERSION=$(
        aws s3api head-object --bucket ama-${ENVIRONMENT}-datalake-lambda-us-east-1 --key ${BUNDLE} \
        | grep package_version | sed 's/"//g' | awk '{print $2}'
    )
}


setup_virtual_environment() {
    ${PWD}/Script/setup-virtual-environment Master/BitBucketPipelines
    export VIRTUAL_ENV=${PWD}/Environment/Master/BitBucketPipelines
    export PATH="${VIRTUAL_ENV}/bin:$PATH"
}


install_jdbc_drivers() {
    if [[ "$INSTALL_DB2_DRIVER" == "True" ]]; then
        install_db2_driver
    elif [[ "$INSTALL_INFORMIX_DRIVER" == "True" ]]; then
        install_informix_driver
    elif [[ "$INSTALL_SQLSERVER_DRIVER" == "True" ]]; then
        install_sqlserver_driver
    fi
}


create_code_bundle() {
    if [[ "$ENVIRONMENT" == "sbx" || "$ENVIRONMENT" == "dev" ]]; then
        export ENABLE_FEATURE_DEV=True
    elif [[ "$ENVIRONMENT" == "tst" ]]; then
        export ENABLE_FEATURE_TEST=True
    elif [[ "$ENVIRONMENT" == "itg" ]]; then
        export ENABLE_FEATURE_STAGE=True
    elif [[ "$ENVIRONMENT" == "prd" ]]; then
        export ENABLE_FEATURE_PROD=True
    fi

    if [[ "$RUNTIME" == "Python" ]]; then
        if [[ "$USE_PACKAGE" == "True" ]]; then
            determine_python_package
        fi

        ${PWD}/Deploy/Master/create-python-bundle --project $PROJECT $PACKAGE $EXTRA_FILES
    elif [[ "$RUNTIME" == "Java" ]]; then
        cp Build/${PROJECT}/log4j2.xml ./log4j2.xml

        ${PWD}/Deploy/Master/create-java-bundle --project $PROJECT $EXTRA_FILES -f ./log4j2.xml
    else
        echo "Error: invalid runtime "'"'"$RUNTIME"'"'""
        exit 1
    fi
}


upload_code_bundle() {
    if [[ "$RUNTIME" == "Python" ]]; then
        aws s3 cp ${METADATA} Bundle.zip s3://ama-${ENVIRONMENT}-datalake-lambda-us-east-1/${BUNDLE}
    elif [[ "$RUNTIME" == "Java" ]]; then
        rm Bundle/target/original-*.jar

        aws s3 cp ${METADATA} Bundle/target/*.jar s3://ama-${ENVIRONMENT}-datalake-lambda-us-east-1/${BUNDLE}
    fi
}


print_usage() {
    echo "Usage: deploy-lambda-function [OPTIONS]..."
    echo "Bundle and upload a code bundle for a Lambda function."
    echo
    echo "OPTIONS"
    echo "  -h, --help                            print this usage text"
    echo "  -e, --environment <environment>       deployment environment (dev, tst, itg, prd)"
    echo "  -p, --project <project>               project path relative to Build/"
    echo "  -P, --package                         use the latest pre-packaged component instead of sources"
    echo "  -b, --bundle <bundle>                 name of the uploaded bundle file in S3"
}


install_db2_driver() {
    aws --profile default s3 cp s3://${DRIVER_BUCKET}/JDBC/Db2JdbcDriver.zip Db2JdbcDriver.zip
    unzip ./Db2JdbcDriver.zip
    echo "db2.jcc.charsetDecoderEncoder=3" >> ./DB2JccConfiguration.properties

    EXTRA_FILES+="-f db2jcc4.jar -f DB2JccConfiguration.properties"
}


install_informix_driver() {
    aws --profile default s3 cp s3://${DRIVER_BUCKET}/JDBC/InformixJdbcDriver.zip InformixJdbcDriver.zip
    unzip ./InformixJdbcDriver.zip

    EXTRA_FILES+="-f jdbc-4.50.4.1.jar -f bson-4.2.0.jar"
}


install_sqlserver_driver() {
    aws --profile default s3 cp s3://${DRIVER_BUCKET}/JDBC/SqlServerJdbcDriver.zip SqlServerJdbcDriver.zip
    unzip ./SqlServerJdbcDriver.zip
    mv sqljdbc_10.2\\enu/mssql-jdbc-10.2.0.jre8.jar mssql-jdbc-10.2.0.jre8.jar

    EXTRA_FILES+="-f mssql-jdbc-10.2.0.jre8.jar"
}


determine_python_package() {
    source Build/${PROJECT}/.ci/release.sh $ENVIRONMENT
    version="$RELEASE_VERSION"

    if [[ "$RELEASE_VERSION" == "dev" ]]; then
        version=$(
            aws --profile default codeartifact list-package-versions \
                --domain datalabs --repository datalabs-sbx --package $RELEASE_NAME \
                --format pypi --sort-by PUBLISHED_TIME \
                | grep -m 1 -e '"version": ' | sed 's/..*: "//' | sed 's/",//'
        )
    fi

    PACKAGE="--package ${RELEASE_NAME}==${version}"
    METADATA='--metadata {"package_version":"'${version}'"}'
}


main "$@"
