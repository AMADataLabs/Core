#!/usr/bin/env bash

set -eu

SCRIPT_PATH=`realpath $0`
SCRIPT_BASE_PATH=`dirname $SCRIPT_PATH`
RUN="${SCRIPT_BASE_PATH}/run.py python"

AWS_DEFAULT_REGION=us-east-1

REPOSITORY=
ENVIRONMENT=
PROJECT=
RUNTIME=
PACKAGE_NAME=
PACKAGE_VERSION=
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
DEPLOYED_VERSION=


main() {
    process_arguments "$@"

    get_deployed_version

    if [[ "$RUNTIME" == "Python" ]]; then
        determine_python_package
    else
        echo "Unsupported runtime: $RUNTIME"
        exit 1
    fi

    if [[ "$DEPLOYED_VERSION" != "$RELEASE_VERSION" ]]; then
        build_container_image

        upload_container_image
    fi
}


process_arguments() {
    while (( "$#" )); do
      case "$1" in
        -h|--help)
            print_usage
            exit 0
            ;;
        -e|--environment)
            ENVIRONMENT=$2
            shift
            shift
            ;;
        -p|--project)
            PROJECT=$2
            shift
            shift
            ;;
        -r|--runtime)
            RUNTIME=$2
            shift
            shift
            ;;
        -R|--repo)
            REPOSITORY=$2
            shift
            shift
            ;;
        -i|--key-id)
            AWS_ACCESS_KEY_ID=$2
            shift
            shift
            ;;
        -k|--secret-key)
            AWS_SECRET_ACCESS_KEY=$2
            shift
            shift
            ;;
        *)
            echo "Unexpected argument $1"
            print_usage
            exit 0
            ;;
      esac
    done
}


get_deployed_version() {
    aws ecr get-login-password --region us-east-1 2>/dev/null \
        | docker login --username AWS --password-stdin 394406051370.dkr.ecr.us-east-1.amazonaws.com &> /dev/null

    deployed_versions=(
        $(
            aws ecr list-images --repository-name ${REPOSITORY} | jq '.imageIds[].imageTag' | grep -v null | sed 's/"//g'\
            | grep -v latest | xargs -n1 | sort | xargs
        )
    )

    version_count=${#deployed_versions[@]}
    DEPLOYED_VERSION=${deployed_versions[$(expr $version_count - 1)]}
}


determine_python_package() {
    source Build/${PROJECT}/.ci/release.sh $ENVIRONMENT
    version="$RELEASE_VERSION"

    if [[ "$RELEASE_VERSION" == "dev" ]]; then
        version=$(
            aws --profile default codeartifact list-package-versions \
                --domain datalabs --repository datalabs-sbx --package $RELEASE_NAME \
                --format pypi --sort-by PUBLISHED_TIME \
                | grep -m 1 -e '"version": ' | sed 's/..*: "//' | sed 's/",//'
        )
    fi

    PACKAGE_NAME=${RELEASE_NAME}
    PACKAGE_VERSION=${version}
}


build_container_image() {
    docker build --build-arg PACKAGE_NAME=${PACKAGE_NAME} --build-arg PACKAGE_VERSION=${PACKAGE_VERSION} \
         --build-arg AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} --build-arg AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
         -t ${PACKAGE_NAME} -f ./Build/${PROJECT}/Dockerfile ./
}


upload_container_image() {
    docker tag  ${PACKAGE_NAME} 394406051370.dkr.ecr.us-east-1.amazonaws.com/${PACKAGE_NAME}:${PACKAGE_VERSION}
    docker push 394406051370.dkr.ecr.us-east-1.amazonaws.com/${PACKAGE_NAME}:${PACKAGE_VERSION}

    docker tag ${PACKAGE_NAME} 394406051370.dkr.ecr.us-east-1.amazonaws.com/${PACKAGE_NAME}:latest
    docker push 394406051370.dkr.ecr.us-east-1.amazonaws.com/${PACKAGE_NAME}:latest
}


print_usage() {
    echo "Usage: deploy-lambda-function [OPTIONS]..."
    echo "Bundle and upload a code bundle for a Lambda function."
    echo
    echo "OPTIONS"
    echo "  -h, --help                            print this usage text"
    echo "  -e, --environment <environment>       deployment environment (dev, tst, itg, prd)"
    echo "  -p, --project <project>               project path relative to Build/"
    echo "  -P, --package                         use the latest pre-packaged component instead of sources"
    echo "  -b, --bundle <bundle>                 name of the uploaded bundle file in S3"
}


main "$@"
