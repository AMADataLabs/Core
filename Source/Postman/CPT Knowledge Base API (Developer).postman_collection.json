{
  "info": {
    "_postman_id": "d335ee71-7691-46ec-9b7c-c84e8b6d8e34",
    "name": "CPT Knowledge Base API (Developer)",
    "description": "CPT API Phase I\n\nContact Support:\n Email: datalabs@ama-assn.org",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "7392489"
  },
  "item": [
    {
      "name": "Passport Authentication",
      "item": [
        {
          "name": "Get Passport Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.globals.set('responses', new Map())\r",
                  "\r",
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "    var jsonData = JSON.parse(responseBody);\r",
                  "    pm.globals.set('token', jsonData.accessToken);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Save access token\", function () {\r",
                  "    var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "    pm.globals.set('token', jsonData.accessToken);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"clientId\": \"{{PASSPORT_CONSUMER_ID}}\",\r\n    \"clientSecret\": \"{{PASSPORT_CONSUMER_SECRET}}\",\r\n    \"grantType\": \"client_credentials\"\r\n}\r\n"
            },
            "url": {
              "raw": "https://{{PASSPORT_HOST}}/auth/provider/token",
              "protocol": "https",
              "host": ["{{PASSPORT_HOST}}"],
              "path": ["auth", "provider", "token"]
            }
          },
          "response": []
        },
        {
          "name": "Get all entitlements for user 6210",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains correct fields\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(\"returnCode\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"returnMessage\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"customerNumber\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"customerName\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"responseId\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"subscriptionsList\" in jsonData).to.eql(true)\r",
                  "    pm.expect(Object.keys(jsonData).length).to.eql(6)\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "x-customer-nbr",
                "value": "{{CUSTOMER_NUMBER}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "https://{{PASSPORT_HOST}}/auth/entitlements/list",
              "protocol": "https",
              "host": ["{{PASSPORT_HOST}}"],
              "path": ["auth", "entitlements", "list"]
            }
          },
          "response": []
        },
        {
          "name": "Get CPTKB entitlements",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains correct fields\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(\"returnCode\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"returnMessage\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"customerNumber\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"customerName\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"responseId\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"subscriptionsList\" in jsonData).to.eql(true)\r",
                  "    pm.expect(Object.keys(jsonData).length).to.eql(6)\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "x-customer-nbr",
                "value": "1000263",
                "description": "Dev/Test",
                "type": "text"
              },
              {
                "key": "x-customer-nbr",
                "value": "6435",
                "description": "Production",
                "type": "text",
                "disabled": true
              }
            ],
            "url": {
              "raw": "https://{{PASSPORT_HOST}}/auth/entitlements/list/CPTKB",
              "protocol": "https",
              "host": ["{{PASSPORT_HOST}}"],
              "path": ["auth", "entitlements", "list", "CPTKB"]
            }
          },
          "response": []
        },
        {
          "name": "Get CPT Code Set entitlements for user 6210",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response contains correct fields\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(\"returnCode\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"returnMessage\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"customerNumber\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"customerName\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"responseId\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"subscriptionsList\" in jsonData).to.eql(true)\r",
                  "    pm.expect(Object.keys(jsonData).length).to.eql(6)\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "x-customer-nbr",
                "value": "6210",
                "description": "6209, 6210",
                "type": "text"
              }
            ],
            "url": {
              "raw": "https://{{PASSPORT_HOST}}/auth/entitlements/list/CPTCS",
              "protocol": "https",
              "host": ["{{PASSPORT_HOST}}"],
              "path": ["auth", "entitlements", "list", "CPTCS"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Portal Authentication",
      "item": [
        {
          "name": "Get Portal Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "\r",
                  "console.log(jsonData.access_token);\r",
                  "pm.globals.set('token', jsonData.access_token);\r",
                  "console.log(pm.globals.get('token'));\r",
                  "pm.globals.set('responses', new Map())\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "var consumer_token = pm.environment.get('PORTAL_CONSUMER_KEY') + ':' + pm.environment.get('PORTAL_CONSUMER_SECRET');\r",
                  "var encoded_consumer_token = CryptoJS.enc.Base64.stringify(CryptoJS.enc.Utf8.parse(consumer_token))\r",
                  "console.log(encoded_consumer_token)\r",
                  "\r",
                  "pm.globals.set('consumer_token', encoded_consumer_token);\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": [
                {
                  "key": "value",
                  "value": "Basic {{consumer_token}}",
                  "type": "string"
                },
                {
                  "key": "key",
                  "value": "Authorization",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "client_credentials",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{PORTAL_TOKEN_URL}}",
              "host": ["{{PORTAL_TOKEN_URL}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Articles",
      "item": [
        {
          "name": "Articles Summary (alpha keyword)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
                  "    var responses = pm.globals.get('responses')\r",
                  "    responses[pm.info.requestName] = pm.response.json()\r",
                  "    pm.globals.set('responses', responses)\r",
                  "}\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response contains correct top-level fields\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(\"total_records\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"items\" in jsonData).to.eql(true)\r",
                  "    pm.expect(Object.keys(jsonData).length).to.eql(2)\r",
                  "\r",
                  "    pm.expect(Array.isArray(jsonData[\"items\"])).to.eql(true);\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Articles contain correct fields\", function () {\r",
                  "    var items = pm.response.json()[\"items\"];\r",
                  "\r",
                  "    items.forEach(function(record) {\r",
                  "        pm.expect(\"article_id\" in record).to.eql(true)\r",
                  "        pm.expect(\"section\" in record).to.eql(true)\r",
                  "        pm.expect(\"subsection\" in record).to.eql(true)\r",
                  "        pm.expect(\"question\" in record).to.eql(true)\r",
                  "        pm.expect(\"answer\" in record).to.eql(true)\r",
                  "        pm.expect(\"updated_on\" in record).to.eql(true)\r",
                  "        pm.expect(Object.keys(record).length).to.eql(6)\r",
                  "    })\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "cpt-api-sbx.cptapi.local",
                "type": "text",
                "disabled": true
              },
              {
                "key": "x-customer-nbr",
                "value": "{{CUSTOMER_NUMBER}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/articles/summary?keyword=kidney",
              "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
              "path": ["articles", "summary"],
              "query": [
                {
                  "key": "keyword",
                  "value": "kidney"
                }
              ]
            },
            "description": "Returns all lengths of the descriptor for a particular CPT Code."
          },
          "response": []
        },
        {
          "name": "Articles Summary (CPT code keyword)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
                  "    var responses = pm.globals.get('responses')\r",
                  "    responses[pm.info.requestName] = pm.response.json()\r",
                  "    pm.globals.set('responses', responses)\r",
                  "}\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response contains correct top-level fields\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(\"total_records\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"items\" in jsonData).to.eql(true)\r",
                  "    pm.expect(Object.keys(jsonData).length).to.eql(2)\r",
                  "\r",
                  "    pm.expect(Array.isArray(jsonData[\"items\"])).to.eql(true);\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Articles contain correct fields\", function () {\r",
                  "    var items = pm.response.json()[\"items\"];\r",
                  "\r",
                  "    items.forEach(function(record) {\r",
                  "        pm.expect(\"article_id\" in record).to.eql(true)\r",
                  "        pm.expect(\"section\" in record).to.eql(true)\r",
                  "        pm.expect(\"subsection\" in record).to.eql(true)\r",
                  "        pm.expect(\"question\" in record).to.eql(true)\r",
                  "        pm.expect(\"answer\" in record).to.eql(true)\r",
                  "        pm.expect(\"updated_on\" in record).to.eql(true)\r",
                  "        pm.expect(Object.keys(record).length).to.eql(6)\r",
                  "    })\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "cpt-api-sbx.cptapi.local",
                "type": "text",
                "disabled": true
              },
              {
                "key": "x-customer-nbr",
                "value": "{{CUSTOMER_NUMBER}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/articles/summary?keyword=87501",
              "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
              "path": ["articles", "summary"],
              "query": [
                {
                  "key": "keyword",
                  "value": "87501"
                }
              ]
            },
            "description": "Returns all lengths of the descriptor for a particular CPT Code."
          },
          "response": []
        },
        {
          "name": "Articles Summary (section)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
                  "    var responses = pm.globals.get('responses')\r",
                  "    responses[pm.info.requestName] = pm.response.json()\r",
                  "    pm.globals.set('responses', responses)\r",
                  "}\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response contains correct top-level fields\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(\"total_records\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"items\" in jsonData).to.eql(true)\r",
                  "    pm.expect(Object.keys(jsonData).length).to.eql(2)\r",
                  "\r",
                  "    pm.expect(Array.isArray(jsonData[\"items\"])).to.eql(true);\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Articles contain correct fields\", function () {\r",
                  "    var items = pm.response.json()[\"items\"];\r",
                  "\r",
                  "    items.forEach(function(record) {\r",
                  "        pm.expect(\"article_id\" in record).to.eql(true)\r",
                  "        pm.expect(\"section\" in record).to.eql(true)\r",
                  "        pm.expect(\"subsection\" in record).to.eql(true)\r",
                  "        pm.expect(\"question\" in record).to.eql(true)\r",
                  "        pm.expect(\"answer\" in record).to.eql(true)\r",
                  "        pm.expect(\"updated_on\" in record).to.eql(true)\r",
                  "        pm.expect(Object.keys(record).length).to.eql(6)\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Each article's section matches the URL query parameter\", function () {\r",
                  "    var sectionQueryParam = pm.request.url.query.get('section');\r",
                  "    var items = pm.response.json()[\"items\"];\r",
                  "\r",
                  "    items.forEach(function(record) {\r",
                  "        pm.expect(record.section).to.eql(sectionQueryParam);\r",
                  "    });\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "cpt-api-sbx.cptapi.local",
                "type": "text",
                "disabled": true
              },
              {
                "key": "x-customer-nbr",
                "value": "{{CUSTOMER_NUMBER}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/articles/summary?keyword=kidney&section=Surgery",
              "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
              "path": ["articles", "summary"],
              "query": [
                {
                  "key": "keyword",
                  "value": "kidney"
                },
                {
                  "key": "section",
                  "value": "Surgery"
                }
              ]
            },
            "description": "Returns all lengths of the descriptor for a particular CPT Code."
          },
          "response": []
        },
        {
          "name": "Articles Summary (updated_after_date)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
                  "    var responses = pm.globals.get('responses')\r",
                  "    responses[pm.info.requestName] = pm.response.json()\r",
                  "    pm.globals.set('responses', responses)\r",
                  "}\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response contains correct top-level fields\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(\"total_records\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"items\" in jsonData).to.eql(true)\r",
                  "    pm.expect(Object.keys(jsonData).length).to.eql(2)\r",
                  "\r",
                  "    pm.expect(Array.isArray(jsonData[\"items\"])).to.eql(true);\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Articles contain correct fields\", function () {\r",
                  "    var items = pm.response.json()[\"items\"];\r",
                  "\r",
                  "    items.forEach(function(record) {\r",
                  "        pm.expect(\"article_id\" in record).to.eql(true)\r",
                  "        pm.expect(\"section\" in record).to.eql(true)\r",
                  "        pm.expect(\"subsection\" in record).to.eql(true)\r",
                  "        pm.expect(\"question\" in record).to.eql(true)\r",
                  "        pm.expect(\"answer\" in record).to.eql(true)\r",
                  "        pm.expect(\"updated_on\" in record).to.eql(true)\r",
                  "        pm.expect(Object.keys(record).length).to.eql(6)\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Each 'updated_on' date comes after the 'updated_after_date' query parameter\", function () {\r",
                  "    var responseData = pm.response.json();\r",
                  "    var updatedAfterDate = pm.request.url.query.get('updated_after_date');\r",
                  "    var items = responseData.items;\r",
                  "\r",
                  "    items.forEach(function(item) {\r",
                  "        pm.expect(new Date(item.updated_on)).to.be.greaterThan(new Date(updatedAfterDate));\r",
                  "    });\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "cpt-api-sbx.cptapi.local",
                "type": "text",
                "disabled": true
              },
              {
                "key": "x-customer-nbr",
                "value": "{{CUSTOMER_NUMBER}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/articles/summary?keyword=kidney&updated_after_date=2022-01-01",
              "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
              "path": ["articles", "summary"],
              "query": [
                {
                  "key": "keyword",
                  "value": "kidney"
                },
                {
                  "key": "updated_after_date",
                  "value": "2022-01-01"
                }
              ]
            },
            "description": "Returns all lengths of the descriptor for a particular CPT Code."
          },
          "response": []
        },
        {
          "name": "Articles Summary (updated_before_date)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
                  "    var responses = pm.globals.get('responses')\r",
                  "    responses[pm.info.requestName] = pm.response.json()\r",
                  "    pm.globals.set('responses', responses)\r",
                  "}\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response contains correct top-level fields\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(\"total_records\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"items\" in jsonData).to.eql(true)\r",
                  "    pm.expect(Object.keys(jsonData).length).to.eql(2)\r",
                  "\r",
                  "    pm.expect(Array.isArray(jsonData[\"items\"])).to.eql(true);\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Articles contain correct fields\", function () {\r",
                  "    var items = pm.response.json()[\"items\"];\r",
                  "\r",
                  "    items.forEach(function(record) {\r",
                  "        pm.expect(\"article_id\" in record).to.eql(true)\r",
                  "        pm.expect(\"section\" in record).to.eql(true)\r",
                  "        pm.expect(\"subsection\" in record).to.eql(true)\r",
                  "        pm.expect(\"question\" in record).to.eql(true)\r",
                  "        pm.expect(\"answer\" in record).to.eql(true)\r",
                  "        pm.expect(\"updated_on\" in record).to.eql(true)\r",
                  "        pm.expect(Object.keys(record).length).to.eql(6)\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "\r",
                  "\r",
                  "pm.test(\"Each 'updated_on' date comes before the 'updated_before_date' query parameter\", function () {\r",
                  "    var responseData = pm.response.json();\r",
                  "    var updatedBeforeDate = pm.request.url.query.get('updated_before_date');\r",
                  "    var items = responseData.items;\r",
                  "\r",
                  "    items.forEach(function(item) {\r",
                  "        pm.expect(new Date(item.updated_on)).to.be.lessThan(new Date(updatedBeforeDate));\r",
                  "    });\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "cpt-api-sbx.cptapi.local",
                "type": "text",
                "disabled": true
              },
              {
                "key": "x-customer-nbr",
                "value": "{{CUSTOMER_NUMBER}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/articles/summary?keyword=kidney&updated_before_date=2010-01-01",
              "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
              "path": ["articles", "summary"],
              "query": [
                {
                  "key": "keyword",
                  "value": "kidney"
                },
                {
                  "key": "updated_before_date",
                  "value": "2010-01-01"
                }
              ]
            },
            "description": "Returns all lengths of the descriptor for a particular CPT Code."
          },
          "response": []
        },
        {
          "name": "Articles Summary (max results)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response contains correct top-level fields\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(\"total_records\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"items\" in jsonData).to.eql(true)\r",
                  "    pm.expect(Object.keys(jsonData).length).to.eql(2)\r",
                  "\r",
                  "    pm.expect(Array.isArray(jsonData[\"items\"])).to.eql(true);\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Articles contain correct fields\", function () {\r",
                  "    var items = pm.response.json()[\"items\"];\r",
                  "\r",
                  "    items.forEach(function(record) {\r",
                  "        pm.expect(\"article_id\" in record).to.eql(true)\r",
                  "        pm.expect(\"section\" in record).to.eql(true)\r",
                  "        pm.expect(\"subsection\" in record).to.eql(true)\r",
                  "        pm.expect(\"question\" in record).to.eql(true)\r",
                  "        pm.expect(\"answer\" in record).to.eql(true)\r",
                  "        pm.expect(\"updated_on\" in record).to.eql(true)\r",
                  "        pm.expect(Object.keys(record).length).to.eql(6)\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Number of returned records is >= max results\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[\"total_records\"]).to.be.gte(parseInt(pm.request.url.query.get(\"results\")));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "cpt-api-sbx.cptapi.local",
                "type": "text",
                "disabled": true
              },
              {
                "key": "x-customer-nbr",
                "value": "{{CUSTOMER_NUMBER}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/articles/summary?results=5",
              "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
              "path": ["articles", "summary"],
              "query": [
                {
                  "key": "results",
                  "value": "5"
                }
              ]
            },
            "description": "Returns all lengths of the descriptor for a particular CPT Code."
          },
          "response": []
        },
        {
          "name": "Articles Summary (start index)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
                  "    var responses = pm.globals.get('responses')\r",
                  "    responses[pm.info.requestName] = pm.response.json()\r",
                  "    pm.globals.set('responses', responses)\r",
                  "}\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response code indicates success\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response is an array\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response contains correct top-level fields\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(\"total_records\" in jsonData).to.eql(true)\r",
                  "    pm.expect(\"items\" in jsonData).to.eql(true)\r",
                  "    pm.expect(Object.keys(jsonData).length).to.eql(2)\r",
                  "\r",
                  "    pm.expect(Array.isArray(jsonData[\"items\"])).to.eql(true);\r",
                  "\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Articles contain correct fields\", function () {\r",
                  "    var items = pm.response.json()[\"items\"];\r",
                  "\r",
                  "    items.forEach(function(record) {\r",
                  "        pm.expect(\"article_id\" in record).to.eql(true)\r",
                  "        pm.expect(\"section\" in record).to.eql(true)\r",
                  "        pm.expect(\"subsection\" in record).to.eql(true)\r",
                  "        pm.expect(\"question\" in record).to.eql(true)\r",
                  "        pm.expect(\"answer\" in record).to.eql(true)\r",
                  "        pm.expect(\"updated_on\" in record).to.eql(true)\r",
                  "        pm.expect(Object.keys(record).length).to.eql(6)\r",
                  "    })\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Number of returned records is >= max results\", function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData[\"total_records\"]).to.be.gte(parseInt(pm.request.url.query.get(\"results\")));\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "cpt-api-sbx.cptapi.local",
                "type": "text",
                "disabled": true
              },
              {
                "key": "x-customer-nbr",
                "value": "{{CUSTOMER_NUMBER}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/articles/summary?results=5&index=30",
              "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
              "path": ["articles", "summary"],
              "query": [
                {
                  "key": "results",
                  "value": "5"
                },
                {
                  "key": "index",
                  "value": "30"
                }
              ]
            },
            "description": "Returns all lengths of the descriptor for a particular CPT Code."
          },
          "response": []
        },
        {
          "name": "Article",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response code indicates success\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response is an object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response contains correct top-level fields\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('article_id');",
                  "    pm.expect(jsonData).to.have.property('section');",
                  "    pm.expect(jsonData).to.have.property('subsection');",
                  "    pm.expect(jsonData).to.have.property('question');",
                  "    pm.expect(jsonData).to.have.property('answer');",
                  "    pm.expect(jsonData).to.have.property('updated_on');",
                  "    pm.expect(Object.keys(jsonData).length).to.eql(6);",
                  "});",
                  "",
                  "",
                  "pm.test(\"Response contains correct article\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData[\"article_id\"]).to.eql(pm.environment.get('VIGNETTES_ARTICLE_ID'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-customer-nbr",
                "value": "{{CUSTOMER_NUMBER}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/articles/:article_id?",
              "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
              "path": ["articles", ":article_id"],
              "query": [
                {
                  "key": "",
                  "value": null
                }
              ],
              "variable": [
                {
                  "key": "article_id",
                  "value": "{{VIGNETTES_ARTICLE_ID}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Errors",
      "item": [
        {
          "name": "Unauthorized (Direct)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 401 (Direct only)\", function () {\r",
                  "    var host = pm.request.url.host[0];\r",
                  "\r",
                  "    if (!host.includes(\"platform\")) {\r",
                  "        pm.expect(pm.response.code).to.equal(401);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "pm.test('Response is a single object', function () {\r",
                  "    var jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.be.an('object');\r",
                  "})\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "cpt-api-sbx.cptapi.local",
                "type": "text",
                "disabled": true
              },
              {
                "key": "x-customer-nbr",
                "value": "6210",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/articles/summary?keyword=abc",
              "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
              "path": ["articles", "summary"],
              "query": [
                {
                  "key": "keyword",
                  "value": "abc"
                }
              ]
            },
            "description": "Returns all lengths of the descriptor for a particular CPT Code."
          },
          "response": []
        },
        {
          "name": "Unauthorized (Portal)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 401 (Portal-only)\", function () {\r",
                  "    var host = pm.request.url.host[0];\r",
                  "\r",
                  "    if (host.includes(\"platform\")) {\r",
                  "        pm.expect(pm.response.code).to.equal(401);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"Response is in XML format\", function () {\r",
                  "    var host = pm.request.url.host[0];\r",
                  "\r",
                  "    if (host.includes(\"platform\")) {\r",
                  "        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/xml');\r",
                  "    }\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "12345",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "cpt-api-sbx.cptapi.local",
                "type": "text",
                "disabled": true
              },
              {
                "key": "x-customer-nbr",
                "value": "6210",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/articles/summary?keyword=abc",
              "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
              "path": ["articles", "summary"],
              "query": [
                {
                  "key": "keyword",
                  "value": "abc"
                }
              ]
            },
            "description": "Returns all lengths of the descriptor for a particular CPT Code."
          },
          "response": []
        },
        {
          "name": "Forbidden (Direct)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Response status code is 403 if URL doesn't contain 'platform'\", function () {\r",
                  "    var host = pm.request.url.host[0];\r",
                  "\r",
                  "    if (!host.includes(\"platform\")) {\r",
                  "        pm.expect(pm.response.code).to.equal(403);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test('Response is a single object', function () {\r",
                  "    var host = pm.request.url.host[0];\r",
                  "\r",
                  "    if (!host.includes(\"platform\")) {\r",
                  "        var jsonData = pm.response.json();\r",
                  "\r",
                  "        pm.expect(jsonData).to.be.an('object');\r",
                  "    }\r",
                  "})\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disabledSystemHeaders": {}
          },
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "12345",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "key": "Host",
                "value": "cpt-api-sbx.cptapi.local",
                "type": "text",
                "disabled": true
              },
              {
                "key": "x-customer-nbr",
                "value": "6210",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/articles/summary?keyword=abc",
              "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
              "path": ["articles", "summary"],
              "query": [
                {
                  "key": "keyword",
                  "value": "abc"
                }
              ]
            },
            "description": "Returns all lengths of the descriptor for a particular CPT Code."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Default",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response code indicates success', function () {\r",
              "    pm.response.to.have.status(404);\r",
              "})\r",
              "\r",
              "pm.test('Response is an error object', function () {\r",
              "    console.log(responseBody);\r",
              "    if (responseBody.includes('xmlns')) {\r",
              "        var jsonData = xml2Json(responseBody);\r",
              "\r",
              "        pm.expect('am:fault' in jsonData).to.eql(true);\r",
              "    } else {\r",
              "        var jsonData = pm.response.json();\r",
              "\r",
              "        pm.expect(jsonData).to.have.property('message');\r",
              "        pm.expect(Object.keys(jsonData).length).to.eql(1);\r",
              "    }\r",
              "})\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "x-customer-nbr",
            "value": "{{CUSTOMER_NUMBER}}",
            "type": "text"
          }
        ],
        "url": {
          "raw": "{{CPT_KNOWLEDGE_BASE_API_URL}}/some/random/endpoint/path",
          "host": ["{{CPT_KNOWLEDGE_BASE_API_URL}}"],
          "path": ["some", "random", "endpoint", "path"]
        },
        "description": "Returns all lengths of the descriptor for a particular CPT Code."
      },
      "response": []
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "MARK_LOGIC_HOST",
      "value": "appd1454"
    },
    {
      "key": "MARK_LOGIC_PORT",
      "value": "8000"
    },
    {
      "key": "MARK_LOGIC_USERNAME",
      "value": "plane"
    },
    {
      "key": "MARK_LOGIC_PASSWORD",
      "value": "pL@n3_dev"
    },
    {
      "key": "SAVE_DATA",
      "value": "false"
    }
  ]
}
