{
	"info": {
		"_postman_id": "730d8675-1ad4-4a2f-a805-ca0427e91d07",
		"name": "CPT API (Direct)",
		"description": "CPT API Phase I\n\nContact Support:\n Email: datalabs@ama-assn.org",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7392489"
	},
	"item": [
		{
			"name": "Initialize",
			"item": [
				{
					"name": "Get Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set('responses', new Map())\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"    pm.globals.set('token', jsonData.accessToken);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Save access token\", function () {\r",
									"    var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"    pm.globals.set('token', jsonData.accessToken);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"clientId\": \"{{PASSPORT_CONSUMER_ID}}\",\r\n    \"clientSecret\": \"{{PASSPORT_CONSUMER_SECRET}}\",\r\n    \"grantType\": \"client_credentials\"\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{PASSPORT_HOST}}/auth/provider/token",
							"protocol": "https",
							"host": [
								"{{PASSPORT_HOST}}"
							],
							"path": [
								"auth",
								"provider",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CPT entitlements",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"returnCode\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"returnMessage\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"customerNumber\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"customerName\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"responseId\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"subscriptionsList\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(6)\r",
									"});\r",
									"\r",
									"pm.test(\"Subscriptions list is not empty\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Object.keys(jsonData.subscriptionsList)).to.not.be.empty\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://{{PASSPORT_HOST}}/auth/entitlements/list/CPTAPI",
							"protocol": "https",
							"host": [
								"{{PASSPORT_HOST}}"
							],
							"path": [
								"auth",
								"entitlements",
								"list",
								"CPTAPI"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Descriptors",
			"item": [
				{
					"name": "All CPT descriptors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Token: \" + pm.globals.get('token'))\r",
									"console.log(\"Authorization Header: \" + pm.request.headers.get('Authorization'))\r",
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"console.log(\"Request URL Path: \" + pm.request.url.getPath())\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"medium_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"long_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(5)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/descriptors",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"descriptors"
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "All CPT descriptors with keyword filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"var request_path = pm.request.url.getPath().split('/')\r",
									"var request_name = request_path[request_path.length-1]\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"medium_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"long_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(5)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Descriptors have keywords\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        var descriptors = (record.short_descriptor + record.medium_descriptor + record.long_descriptor).toLowerCase();\r",
									"\r",
									"        pm.expect(\r",
									"            descriptors.includes('heart') ||\r",
									"            descriptors.includes('blood')\r",
									"        ).to.eql(true)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "cpt-api-sbx.cptapi.local",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/descriptors?keyword=heart&keyword=blood",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"descriptors"
							],
							"query": [
								{
									"key": "keyword",
									"value": "heart",
									"description": "Filter by keyword across descriptors."
								},
								{
									"key": "keyword",
									"value": "blood"
								}
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "All CPT descriptors with length filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"medium_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/descriptors?length=short&length=medium",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"descriptors"
							],
							"query": [
								{
									"key": "length",
									"value": "short",
									"description": "Filter by description length. Any of \"short\", \"medium\", or \"long\"."
								},
								{
									"key": "length",
									"value": "medium"
								},
								{
									"key": "length",
									"value": "long",
									"disabled": true
								}
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "All CPT descriptors with wildcard search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"medium_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"long_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(5)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(\r",
									"            (record.code.startsWith('0') && record.code.endsWith('U')) ||\r",
									"            record.code.endsWith('T') ||\r",
									"            record.code.startsWith('9')\r",
									"        ).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "cpt-data-api-sbx.amaaws.org",
								"description": "cpt-api-sbx.cptapi.local",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/descriptors?code=0*U&code=*T&code=9*",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"descriptors"
							],
							"query": [
								{
									"key": "code",
									"value": "0*U"
								},
								{
									"key": "code",
									"value": "*T"
								},
								{
									"key": "code",
									"value": "9*"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All CPT descriptors with since filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"medium_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"long_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(5)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// pm.test(\"Codes match filter criteria\", function () {\r",
									"//     var jsonData = pm.response.json();\r",
									"\r",
									"//     jsonData.forEach(function(record) {\r",
									"//         pm.expect(record.code.length).to.eql(5);\r",
									"//         pm.expect(\r",
									"//             (record.code.startsWith('0') && record.code.endsWith('U')) ||\r",
									"//             record.code.endsWith('T') ||\r",
									"//             record.code.startsWith('9')\r",
									"//         ).to.eql(true);\r",
									"//     });\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/descriptors?since=20200401",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"descriptors"
							],
							"query": [
								{
									"key": "since",
									"value": "20200401"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All CPT descriptors with all filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"short_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"long_descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Descriptors have keywords\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        var descriptors = (record.short_descriptor + record.medium_descriptor + record.long_descriptor).toLowerCase();\r",
									"\r",
									"        pm.expect(\r",
									"            descriptors.includes('heart') ||\r",
									"            descriptors.includes('blood')\r",
									"        ).to.eql(true)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/descriptors?keyword=heart&keyword=blood&length=short&length=long",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"descriptors"
							],
							"query": [
								{
									"key": "keyword",
									"value": "heart",
									"description": "Filter by keyword across descriptors."
								},
								{
									"key": "keyword",
									"value": "blood"
								},
								{
									"key": "length",
									"value": "short",
									"description": "Filter by description length. Any of \"short\", \"medium\", or \"long\"."
								},
								{
									"key": "length",
									"value": "long"
								}
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "CPT descriptor by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is a single dict\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"code\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"short_descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"medium_descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"long_descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"language\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(5)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/descriptor/:code",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"descriptor",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "87426",
									"type": "string"
								}
							]
						},
						"description": "Returns all lengths of the descriptor for a particular CPT Code."
					},
					"response": []
				},
				{
					"name": "CPT descriptor by code with length filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is a single dict\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"code\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"medium_descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"long_descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"language\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(4)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/descriptor/:code?length=medium&length=long",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"descriptor",
								":code"
							],
							"query": [
								{
									"key": "length",
									"value": "medium"
								},
								{
									"key": "length",
									"value": "long"
								}
							],
							"variable": [
								{
									"key": "code",
									"value": "87426",
									"type": "string"
								}
							]
						},
						"description": "Returns all lengths of the descriptor for a particular CPT Code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Clinician Descriptors",
			"item": [
				{
					"name": "All ClinicianDescriptors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/clinician/descriptors",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"clinician",
								"descriptors"
							]
						}
					},
					"response": []
				},
				{
					"name": "All ClinicianDescriptors with keyword filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Descriptors have keywords\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        var descriptor = record.descriptor.toLowerCase()\r",
									"        pm.expect(\r",
									"            descriptor.includes('heart') ||\r",
									"            descriptor.includes('water')\r",
									"        ).to.eql(true)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/clinician/descriptors?keyword=heart&keyword=water",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"clinician",
								"descriptors"
							],
							"query": [
								{
									"key": "keyword",
									"value": "heart",
									"description": "Filter by keyword across descriptors."
								},
								{
									"key": "keyword",
									"value": "water"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All ClinicianDescriptors with wildcard search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(\r",
									"            record.code.startsWith('0') && record.code.endsWith('5')\r",
									"        ).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/clinician/descriptors?code=0*5",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"clinician",
								"descriptors"
							],
							"query": [
								{
									"key": "code",
									"value": "0*5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All ClinicianDescriptors with since filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/clinician/descriptors?since=20200401",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"clinician",
								"descriptors"
							],
							"query": [
								{
									"key": "since",
									"value": "20200401"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Clinician descriptors by CPT code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Clinician Descriptor ID is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.id).to.eql(10045627)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": false,
						"followOriginalHttpMethod": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/clinician/descriptors/:code",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"clinician",
								"descriptors",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "11970",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Consumer Descriptors",
			"item": [
				{
					"name": "All Consumer descriptors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(3)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/consumer/descriptors",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"consumer",
								"descriptors"
							]
						}
					},
					"response": []
				},
				{
					"name": "All Consumer descriptors with keyword filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(3)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Descriptors have keywords\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        var descriptor = record.descriptor.toLowerCase()\r",
									"        pm.expect(\r",
									"            descriptor.includes('heart') ||\r",
									"            descriptor.includes('water')\r",
									"        ).to.eql(true)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/consumer/descriptors?keyword=heart&keyword=water",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"consumer",
								"descriptors"
							],
							"query": [
								{
									"key": "keyword",
									"value": "heart",
									"description": "Filter by keyword across descriptors."
								},
								{
									"key": "keyword",
									"value": "water"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All ConsumerDescriptors with wildcard search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(3)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(\r",
									"            record.code.startsWith('0') && record.code.endsWith('5')\r",
									"        ).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/consumer/descriptors?code=0*5",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"consumer",
								"descriptors"
							],
							"query": [
								{
									"key": "code",
									"value": "0*5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All ConsumerDescriptors with since filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"language\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(3)\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(\r",
									"            record.code.startsWith('0') && record.code.endsWith('5')\r",
									"        ).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/consumer/descriptors?code=0*5",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"consumer",
								"descriptors"
							],
							"query": [
								{
									"key": "code",
									"value": "0*5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Consumer descriptor by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is a single dict\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
									"});\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"code\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"language\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(3)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/consumer/descriptor/:code",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"consumer",
								"descriptor",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "00100",
									"type": "string"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Modifiers",
			"item": [
				{
					"name": "All Modifiers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"type\" in record).to.eql(true)\r",
									"        pm.expect(\"general_use\" in record).to.eql(true)\r",
									"        pm.expect(\"ambulatory_service_center\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(5)\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/modifiers",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"modifiers"
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "All Modifiers with type filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"descriptor\" in record).to.eql(true)\r",
									"        pm.expect(\"type\" in record).to.eql(true)\r",
									"        pm.expect(\"general_use\" in record).to.eql(true)\r",
									"        pm.expect(\"ambulatory_service_center\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(5)\r",
									"    })\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Types are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\r",
									"            record.type == 'Level II' ||\r",
									"            record.type == 'Anesthesia Physical Status'\r",
									"        ).to.eql(true)\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/modifiers?type=Level II&type=Anesthesia Physical Status",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"modifiers"
							],
							"query": [
								{
									"key": "type",
									"value": "Level II"
								},
								{
									"key": "type",
									"value": "Anesthesia Physical Status"
								}
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "Modifier by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is a single dict\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"code\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"descriptor\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"type\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"general_use\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"ambulatory_service_center\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(5)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/modifier/:code",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"modifier",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "P5",
									"type": "string"
								}
							]
						},
						"description": "Returns all lengths of the descriptor for a particular CPT Code."
					},
					"response": []
				}
			]
		},
		{
			"name": "PLA",
			"item": [
				{
					"name": "All PLA details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"test\" in record).to.eql(true)\r",
									"        pm.expect(\"lab\" in record).to.eql(true)\r",
									"        pm.expect(\"manufacturer\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/pla/details",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"pla",
								"details"
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "All PLA details with keyword filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"test\" in record).to.eql(true)\r",
									"        pm.expect(\"lab\" in record).to.eql(true)\r",
									"        pm.expect(\"manufacturer\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    })\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(record.code.endsWith('U')).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/pla/details?keyword=aspira&keyword=precise&keyword=strips",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"pla",
								"details"
							],
							"query": [
								{
									"key": "keyword",
									"value": "aspira"
								},
								{
									"key": "keyword",
									"value": "precise"
								},
								{
									"key": "keyword",
									"value": "strips"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "All PLA details with wildcard search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log(\"Results Count: \" + pm.response.json().length)\r",
									"\r",
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"code\" in record).to.eql(true)\r",
									"        pm.expect(\"test\" in record).to.eql(true)\r",
									"        pm.expect(\"lab\" in record).to.eql(true)\r",
									"        pm.expect(\"manufacturer\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(4)\r",
									"    })\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Codes match filter criteria\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(record.code.length).to.eql(5);\r",
									"        pm.expect(record.code.endsWith('U')).to.eql(true);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/pla/details?code=01*U",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"pla",
								"details"
							],
							"query": [
								{
									"key": "code",
									"value": "01*U"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "PLA details by code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is a single dict\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(false);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"code\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"test\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"lab\" in jsonData).to.eql(true)\r",
									"    pm.expect(\"manufacturer\" in jsonData).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData).length).to.eql(4)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/pla/details/:code",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"pla",
								"details",
								":code"
							],
							"variable": [
								{
									"key": "code",
									"value": "0001U",
									"type": "string"
								}
							]
						},
						"description": "Returns all lengths of the descriptor for a particular CPT Code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Releases",
			"item": [
				{
					"name": "All Releases",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.be.above(1)\r",
									"    console.log(jsonData.length)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    jsonData.forEach(function(record) {\r",
									"        pm.expect(\"id\" in record).to.eql(true)\r",
									"        pm.expect(\"date\" in record).to.eql(true)\r",
									"        pm.expect(Object.keys(record).length).to.eql(2)\r",
									"    })\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "cpt-api-sbx.cptapi.local",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/releases",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"releases"
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				},
				{
					"name": "Most recent release",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"    var responses = pm.globals.get('responses')\r",
									"    responses[pm.info.requestName] = pm.response.json()\r",
									"    pm.globals.set('responses', responses)\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response is of expected length\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length).to.eql(1)\r",
									"    // console.log(jsonData.length)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains correct fields\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(\"id\" in jsonData[0]).to.eql(true)\r",
									"    pm.expect(\"date\" in jsonData[0]).to.eql(true)\r",
									"    pm.expect(Object.keys(jsonData[0]).length).to.eql(2)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Host",
								"value": "cpt-api-sbx.cptapi.local",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/releases?results=1",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"releases"
							],
							"query": [
								{
									"key": "results",
									"value": "1"
								}
							]
						},
						"description": "Returns the CPT Code descriptor in short, medium, and long forms."
					},
					"response": []
				}
			]
		},
		{
			"name": "PDF",
			"item": [
				{
					"name": "Latest PDFs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
									"//     var responses = pm.globals.get('responses')\r",
									"//     responses[pm.info.requestName] = pm.response.json()\r",
									"//     pm.globals.set('responses', responses)\r",
									"// }\r",
									"\r",
									"pm.test(\"Response code indicates success\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{API_GATEWAY_URL}}/pdfs",
							"host": [
								"{{API_GATEWAY_URL}}"
							],
							"path": [
								"pdfs"
							]
						},
						"description": "Returns all lengths of the descriptor for a particular CPT Code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.collectionVariables.get('SAVE_DATA') == \"true\") {\r",
							"    var responses = pm.globals.get('responses')\r",
							"    responses[pm.info.requestName] = pm.response.json()\r",
							"    pm.globals.set('responses', responses)\r",
							"}\r",
							"\r",
							"pm.test(\"Response code indicates success\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_GATEWAY_URL}}/some/random/endpoint/path",
					"host": [
						"{{API_GATEWAY_URL}}"
					],
					"path": [
						"some",
						"random",
						"endpoint",
						"path"
					]
				},
				"description": "Returns all lengths of the descriptor for a particular CPT Code."
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "MARK_LOGIC_HOST",
			"value": "appd1454"
		},
		{
			"key": "MARK_LOGIC_PORT",
			"value": "8000"
		},
		{
			"key": "MARK_LOGIC_USERNAME",
			"value": "plane"
		},
		{
			"key": "MARK_LOGIC_PASSWORD",
			"value": "pL@n3_dev"
		},
		{
			"key": "SAVE_DATA",
			"value": "false"
		}
	]
}