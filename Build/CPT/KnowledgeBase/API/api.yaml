openapi: 3.0.2
info:
  title: Knowledge Base Search API
  description: Knowledge Base Search API
  version: 1.1.0
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: datalabs@ama-assn.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: Article Search
    description: Search articles, returning summaries from which the client can isolate articles relevant to their needs.
  - name: Article Fetch
    description: Retrieve articles identified in search results.
  - name: Default 404
    description: Default invalid resource error response
paths:
  /articles/summary:
    get:
      tags:
        - Article Search
      summary: Get article summaries using filters.
      description: Provides best matches of CPT Knowledge Base articles for the provided filters. Only a preview of the answer field is provided. Call /article/{} to get the full article text.
      operationId: getArticleSummaries
      parameters:
        - name: keyword
          in: query
          description: 'A keyword for which to search in Knowledge Base articles'
          required: false
          schema:
            type: array
            items:
              type: string
        - name: section
          in: query
          description: 'A section for which to filter articles'
          required: false
          schema:
            type: array
            items:
              type: string
        - name: subsection
          in: query
          description: 'A subsection for which to filter articles'
          required: false
          schema:
            type: array
            items:
              type: string
        - name: updated_after_date
          in: query
          description: 'Show article summaries updated after this date'
          required: false
          schema:
            type: string
        - name: updated_before_date
          in: query
          description: 'Show article summaries updated before this date'
          required: false
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri: "${invocation_uri}"
        responses:
          default:
            statusCode: 200
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "www3v9"
        cacheKeyParameters:
          - "method.request.path.proxy"
        type: "aws_proxy"
      responses:
         "200":
          description: Found data for search criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Articles'
         "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
         "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
         "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
         "408":
          description: Request Timedout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
         "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
      security:
        - gateway_authorizer: []
  /article/{id}:
    get:
      tags:
        - Article Fetch
      summary: Retrieve an article.
      description: Retrieve an article from CPT Knowledge Base.
      operationId: getArticle
      parameters:
        - name: id
          in: path
          description: 'Article ID'
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri: "${invocation_uri}"
        responses:
          default:
            statusCode: 200
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "www3v9"
        cacheKeyParameters:
          - "method.request.path.proxy"
        type: "aws_proxy"
      responses:
         "200":
          description: 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
         "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
         "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
         "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
         "408":
          description: Request Timedout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
         "500":
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDetails'
      security:
        - gateway_authorizer: []
  /{proxy+}:
    get:
      tags:
        - Default 404
      parameters:
        - name: proxy
          in: path
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri: "${invocation_uri}"
        responses:
          default:
            statusCode: 200
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        cacheNamespace: "www3v9"
        cacheKeyParameters:
          - "method.request.path.proxy"
        type: "aws_proxy"
      responses:
        '404':
          description: Invalid resource.
      security:
        - gateway_authorizer: []
components:
  schemas:
    Articles:
      type: array
      items:
            $ref: '#/components/schemas/Article'
    Article:
      type: object
      properties:
        id:
          type: string
          nullable: false
        section:
          type: string
          nullable: false
        subsection:
          type: string
          nullable: false
        question:
          type: string
          nullable: false
        answer:
          type: string
          nullable: false
    ErrorDetails:
      type: object
      properties:
        ErrorCode:
          type: string
          nullable: true
        ErrorClass:
          type: string
          nullable: true
        Message:
          type: string
          nullable: true
      additionalProperties: false
  securitySchemes:
    gateway_authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: "custom"
      x-amazon-apigateway-authorizer:
          type: token
          authorizerUri: ${authorizer_uri}
externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HS-DataLabs/KnowledgeBase/1.1.0
