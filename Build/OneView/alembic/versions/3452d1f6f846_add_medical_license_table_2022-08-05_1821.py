"""Add medical license table

Revision ID: 3452d1f6f846
Revises: fd3b6e49a7fa
Create Date: 2022-08-05 18:21:43.223417+00:00

"""
from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_trigger import PGTrigger
from sqlalchemy import text as sql_text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '3452d1f6f846'
down_revision = 'fd3b6e49a7fa'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('medical_license',
    sa.Column('number', sa.String(), nullable=False),
    sa.Column('medical_education_number', sa.String(), nullable=False),
    sa.Column('state', sa.String(), nullable=True),
    sa.Column('issue_date', sa.String(), nullable=True),
    sa.Column('expiry_date', sa.String(), nullable=True),
    sa.Column('renew_date', sa.String(), nullable=True),
    sa.Column('degree_type', sa.String(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('type', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['medical_education_number'], ['oneview.physician.medical_education_number'], name=op.f('fk_medical_license_medical_education_number_physician')),
    sa.PrimaryKeyConstraint('number', 'medical_education_number', name=op.f('pk_medical_license')),
    schema='oneview'
    )
    op.drop_table('mat_view_refresh_status', schema='oneview')
    op.drop_table('data_refresh_record', schema='oneview')
    oneview_data_refresh_record_ref_mat_phy_pro_view = PGTrigger(
        schema="oneview",
        signature="ref_mat_phy_pro_view",
        on_entity="oneview.data_refresh_record",
        is_constraint=False,
        definition='AFTER INSERT ON oneview.data_refresh_record FOR EACH ROW EXECUTE PROCEDURE refresh_mat_phy_pro_view_data()'
    )
    op.drop_entity(oneview_data_refresh_record_ref_mat_phy_pro_view)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    oneview_data_refresh_record_ref_mat_phy_pro_view = PGTrigger(
        schema="oneview",
        signature="ref_mat_phy_pro_view",
        on_entity="oneview.data_refresh_record",
        is_constraint=False,
        definition='AFTER INSERT ON oneview.data_refresh_record FOR EACH ROW EXECUTE PROCEDURE refresh_mat_phy_pro_view_data()'
    )
    op.create_entity(oneview_data_refresh_record_ref_mat_phy_pro_view)

    op.create_table('data_refresh_record',
    sa.Column('refresh_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('refresh_end', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('oneview.data_refresh_record_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('requested_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='data_refresh_record_pkey'),
    schema='oneview'
    )
    op.create_table('mat_view_refresh_status',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('db_refreshed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('views_refreshed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='mat_view_refresh_status_pkey'),
    schema='oneview'
    )
    op.drop_table('medical_license', schema='oneview')
    # ### end Alembic commands ###
